<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue CLI 3.0 環境變數 env</title>
      <link href="/blogger/2020/08/21/vue-env/"/>
      <url>/blogger/2020/08/21/vue-env/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">官網</a><br>開發環境跟正式環境的主機不同.導致網站路徑不同，<br>開發通常使用內部測試的 API 、測試的資料庫，<br>正式才會用正式的 API，避免使用正式主機做開發。</p><a id="more"></a><h3 id="檔名命名方式"><a href="#檔名命名方式" class="headerlink" title="檔名命名方式"></a>檔名命名方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.env  所有環境中載入檔案內所有變數</span><br><span class="line">.env.local   同上.但會被git忽略</span><br><span class="line">.env.[mode]   指定模式中載入</span><br><span class="line">.env.[mode].local  同上.但會被git忽略</span><br></pre></td></tr></table></figure><h3 id="文件撰寫方法"><a href="#文件撰寫方法" class="headerlink" title="文件撰寫方法"></a>文件撰寫方法</h3><p>2種寫法.下面的前面一定要 VUE_APP_ 開頭<br>沒有加 src 裡面的檔案讀不到變數</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FOO&#x3D;bar</span><br><span class="line">VUE_APP_SECRET&#x3D;secret</span><br></pre></td></tr></table></figure><h3 id="讀出來"><a href="#讀出來" class="headerlink" title="讀出來"></a>讀出來</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; process.env.名稱</span><br><span class="line">process.env.VUE_APP_SECRET</span><br></pre></td></tr></table></figure><p>*如果出現 undefined<br>設定好 env 後要重新啟動這服務 <code>npm run serve</code></p><h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><ol><li>建立新文件 (檔名叫 .env )</li><li>寫檔案內容 (VUE_APP_ 開頭)</li></ol><h3 id="env-development-檔案"><a href="#env-development-檔案" class="headerlink" title=".env.development 檔案"></a>.env.development 檔案</h3><p>預設的這個比 .env 權重高.因此不用另外在 package.json 的 server 設定<br>development 模式用於 vue-cli-service serve (預設環境)<br>production 模式用於 vue-cli-service build 和 vue-cli-service test:e2e (預設環境)</p><h3 id="特定檔案"><a href="#特定檔案" class="headerlink" title="特定檔案"></a>特定檔案</h3><p>檔案名稱 .env.CY<br>在 package.json 的 server 可以設定切換特定環境<br>加上「–mode 名稱」</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;script&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;vue-cli-service serve --mode CY&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>存檔後再重新啟動 npm run serve</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueX - 3. Getter、Modules 簡化與模組化</title>
      <link href="/blogger/2020/08/07/vuex-3%E7%B0%A1%E5%8C%96%E6%A8%A1%E7%B5%84/"/>
      <url>/blogger/2020/08/07/vuex-3%E7%B0%A1%E5%8C%96%E6%A8%A1%E7%B5%84/</url>
      
        <content type="html"><![CDATA[<h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>目的: 資料呈現前調整(類似 computed )。<br>資料出現在網頁上之前做一些過濾、加減</p><a id="more"></a><h4 id="調整資料-類似-computed"><a href="#調整資料-類似-computed" class="headerlink" title="調整資料(類似 computed )"></a>調整資料(類似 computed )</h4><p>這塊<a href="https://vuex.vuejs.org/zh/guide/getters.html" target="_blank" rel="noopener">官網</a>也得很清楚</p><ul><li>整理 state 資料<br>把需要從 state 叫出來的資料在 computed 塞選過濾的方式<br>可以在 getter 中處理好。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; id: 1, text: &#39;...&#39;, done: true &#125;,</span><br><span class="line">      &#123; id: 2, text: &#39;...&#39;, done: false &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos(state, getter) &#123;</span><br><span class="line">      return state.todos.filter(todo &#x3D;&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在 component 中使用下面 code 可抓到資料</span><br><span class="line">computed: &#123;</span><br><span class="line">  doneTodosFilter () &#123;</span><br><span class="line">    return this.$store.getters.doneTodos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果是在其他模組裡面的要用 mapGetters</li></ul><h4 id="回傳值"><a href="#回傳值" class="headerlink" title="回傳值"></a>回傳值</h4><p>官網範例筆記一下<br>注意: 每次都會去進行調用，不會缓存结果。<br>(有帶參數的範例) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  getTodoById: (state) &#x3D;&gt; (id) &#x3D;&gt; &#123;</span><br><span class="line">    return state.todos.find(todo &#x3D;&gt; todo.id &#x3D;&#x3D;&#x3D; id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.getters.getTodoById(2) &#x2F;&#x2F; -&gt; &#123; id: 2, text: &#39;...&#39;, done: false &#125;</span><br></pre></td></tr></table></figure><h4 id="mapGetters-針對-computed-簡化-或取-getters-資料"><a href="#mapGetters-針對-computed-簡化-或取-getters-資料" class="headerlink" title="mapGetters 針對 computed 簡化 或取 getters 資料"></a>mapGetters 針對 computed 簡化 或取 getters 資料</h4><p>相關行為從 store 讀出來，有 mapGetters、mapActions 這 2 個簡化程式方式差不多。<br>mapGetters 針對 computed 簡化；mapActions 針對 methods 簡化(這個寫在上一篇)</p><p>使用狀況:<br>computed 程式感覺重複太多 or 其他頁也會一值使用，因此改成在 vuex 中的 getter 寫法。</p><ul><li><p>原本 component 中程式的樣子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  isLoading()&#123;</span><br><span class="line">    return this.$store.state.isLoading;</span><br><span class="line">  &#125;,</span><br><span class="line">  cart()&#123;</span><br><span class="line">    return this.$store.state.cart;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>修改 step 1 :設定 getters<br>把 computed 中使用到 vuex 的部分移動到 getter 中 (也是要 return 回傳資料)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line">  isLoading(state)&#123;</span><br><span class="line">    return state.isLoading;</span><br><span class="line">  &#125;,</span><br><span class="line">  cart(state)&#123;</span><br><span class="line">    return state.cart;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 step 2 :引入並使用 mapGetters<br>注意 { mapGetters } 是物件形式.不要忘了加!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &#39;vuex&#39;; &#x2F;&#x2F; step 2-1 引入 mapGetters</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([&#39;isLoading&#39;, &#39;cart&#39;]) &#x2F;&#x2F; step 2-2 修改成 mapGetters</span><br><span class="line">    ...mapGetters(&#39;productsModules&#39;, [&#39;isLoading&#39;, &#39;cart&#39;]) &#x2F;&#x2F; 加入群組的名稱</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><h4 id="VueX-檔案模組化"><a href="#VueX-檔案模組化" class="headerlink" title="VueX 檔案模組化"></a>VueX 檔案模組化</h4><p>分成幾個檔案.引入加上來的地方。</p><ol><li><p>新增模板並把相關資料移動進去<br>index.js 這檔案是先建立一個 vuex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;; &#x2F;&#x2F; 如果需要axios在增加</span><br><span class="line">export default:&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在把 index.js 中 state、mutations、actions、getters 一起複製過去<br>增加刪減</p><p>這邊當時卡了一下.因為一開始複製整個 index.js 過去改<br>vuex重複2次創建.所以產生錯誤查到下面文章解決<br><a href="https://github.com/vuejs/vuex/issues/1748" target="_blank" rel="noopener">[vuex] getters should be function but</a></p></li><li><p>在 store/index.js 中引入<br>A. import 進來模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">import axios from &#39;axios&#39;;</span><br><span class="line"></span><br><span class="line">import productsModules from &quot;.&#x2F;products&quot;; &#x2F;&#x2F; 這邊加入這段引用進來(注意命名的名稱會時常使用)</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)  &#x2F;&#x2F;這邊 vuex 啟用</span><br><span class="line">export default new Vuex.Store(&#123;.....&#125;)</span><br></pre></td></tr></table></figure><p>B. 增加 modules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  strict: true,</span><br><span class="line">  state: &#123;...&#125;,</span><br><span class="line">  mutations: &#123;...&#125;,</span><br><span class="line">  actions: &#123;...&#125;,</span><br><span class="line">  getters:&#123;...&#125;,</span><br><span class="line">  modules: &#123; &#x2F;&#x2F;其他模板引入</span><br><span class="line">    productsModules,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>改到這邊檔案是沒問題的</p></li></ol><h4 id="一般情況的區域、全域狀況"><a href="#一般情況的區域、全域狀況" class="headerlink" title="一般情況的區域、全域狀況"></a>一般情況的區域、全域狀況</h4><ul><li>state 區域變數</li><li>actions、mutations、getters 全域變數<br>(全域擔心的是跟其他檔案的名稱一樣造成衝突不好管理)</li></ul><h5 id="1-全部改成區域變數-namespaced"><a href="#1-全部改成區域變數-namespaced" class="headerlink" title="1. 全部改成區域變數 namespaced"></a>1. 全部改成區域變數 namespaced</h5><p>設定 <code>namespaced: true,</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">namespaced: true,</span><br><span class="line">state: &#123;..&#125;,</span><br></pre></td></tr></table></figure><h5 id="2-模組化後調用其他模組的方法"><a href="#2-模組化後調用其他模組的方法" class="headerlink" title="2. 模組化後調用其他模組的方法"></a>2. 模組化後調用其他模組的方法</h5><p>沒用會報錯<code>[vuex] unknown action type:</code><br>注意: 一開始在 store/index.js 中引入的其他 modules 名稱.<br>是使用引入名稱.不是檔案名稱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 名稱是 productModules 不是 products</span><br><span class="line">import productModules from &quot;.&#x2F;products&quot;;</span><br></pre></td></tr></table></figure><p>參考<br><a href="https://www.jianshu.com/p/5c467a3e1ca9" target="_blank" rel="noopener">vuex 模块化之后如何调用其他模块的方法和属性</a><br><a href="https://ithelp.ithome.com.tw/articles/10209719" target="_blank" rel="noopener">modules 1 </a><br><a href="https://ithelp.ithome.com.tw/articles/10209848" target="_blank" rel="noopener">modules 2</a></p><hr><p>分成在 component、store 兩個部分的寫法。</p><h5 id="2-1-component-中"><a href="#2-1-component-中" class="headerlink" title="2-1. component 中"></a>2-1. component 中</h5><h6 id="A-更改-computed"><a href="#A-更改-computed" class="headerlink" title="A. 更改 computed"></a>A. 更改 computed</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">products() &#123;</span><br><span class="line">  &#x2F;&#x2F;原本-根目錄的</span><br><span class="line">  return this.$store.state.products;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;更改</span><br><span class="line">  return this.$store.state.productModules.products;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h6 id="B-使用-getter、state"><a href="#B-使用-getter、state" class="headerlink" title="B. 使用 getter、state"></a>B. 使用 getter、state</h6><p>使用 mapGetters、mapActions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapStates, mapGetters&#125; from &#39;vuex&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed:&#123;</span><br><span class="line">    ...mapStates([&#39;todos&#39;]),</span><br><span class="line">    ...mapGetters([&#39;itemNotDone&#39;,&#39;itemWithID&#39;]),</span><br><span class="line">    ...mapGetters(&#39;productModules&#39;,[&#39;itemNotDone&#39;,&#39;itemWithID&#39;]), &#x2F;&#x2F; 使用到其他 modules 時.要加檔案引入名稱</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    test()&#123;</span><br><span class="line">      this.itemWithID(&#39;123&#39;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="C-methods-中使用"><a href="#C-methods-中使用" class="headerlink" title="C. methods 中使用"></a>C. methods 中使用</h6><p>路徑需要更改 (文件引入index.js的名稱/actions 下的方法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&#39;productModules&#x2F;selectCategory&#39;, &#123;style,isPageClick&#125;);</span><br></pre></td></tr></table></figure><p>需要用 getter、state 的要用上面的 computed (跨 modules 要用 mapGetters)</p><hr><h5 id="2-2-store-中"><a href="#2-2-store-中" class="headerlink" title="2-2. store 中"></a>2-2. store 中</h5><h6 id="A-加入-root-true"><a href="#A-加入-root-true" class="headerlink" title="A. 加入 { root: true }"></a>A. 加入 { root: true }</h6><p><span style="color:red;"> 注意:store 的檔案中需要，component 的檔案不需要</span><br>使用到其他模組的 mutation、action，需要在 dispatch、commit 的第三個參數帶入 <code>{ root: true }</code>，表示這個 mutation、action 不是目前模組的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.commit(&#39;LOADING&#39;, true); &#x2F;&#x2F; 自己檔案的 LOADING</span><br><span class="line">context.commit(&#39;LOADING&#39;, true, &#123;root: true&#125;); &#x2F;&#x2F; 根目錄的 LOADING</span><br><span class="line">context.commit(&#39;productModules&#x2F;LOADING&#39;, true, &#123;root: true&#125;); &#x2F;&#x2F; productModules 檔案的 LOADING</span><br></pre></td></tr></table></figure><h6 id="B-其他模組的-state、getter"><a href="#B-其他模組的-state、getter" class="headerlink" title="B. 其他模組的 state、getter"></a>B. 其他模組的 state、getter</h6><p>action 中需要使用 context 屬性<br>modules 跨模組才有 rootState、rootGetters</p><ul><li>rootState  // 等同於 <code>store.state</code>，只存在於模版中</li><li>rootGetters // 等同於 <code>store.getters</code>，只存在於模版中</li></ul><p>可以使用 context 或分開寫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用 context</span><br><span class="line">addCartProductIn(context) &#123;</span><br><span class="line">  context.commit(&#39;productModules&#x2F;LOADING&#39;, true, &#123;root: true&#125;); &#x2F;&#x2F; 使用其他模組的 mutation</span><br><span class="line">  context.dispatch(&#39;productModules&#x2F;cartBtnApi&#39;, &#123;&#125;, &#123;root: true&#125;); &#x2F;&#x2F; 使用其他模組的 action</span><br><span class="line">  context.rootState.productModules.selectNum; &#x2F;&#x2F; 獲取其他模組的 state</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 分開寫 (要用物件形式)</span><br><span class="line">addCartProductIn(&#123;commit, rootState, dispatch&#125;) &#123;</span><br><span class="line">  commit(&#39;productModules&#x2F;LOADING&#39;, true, &#123;root: true&#125;);</span><br><span class="line">  dispatch(&#39;productModules&#x2F;cartBtnApi&#39;, &#123;&#125;, &#123;root: true&#125;);</span><br><span class="line"></span><br><span class="line">  rootState.productModules.selectNum;</span><br><span class="line">  rootState[&#39;productModules&#x2F;selectNum&#39;]; &#x2F;&#x2F; 也可以這個</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>官網還有很多其他 Modules 的應用</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueX - 2. State、Mutations、Actions 狀態</title>
      <link href="/blogger/2020/08/06/vuex-2%E5%B1%AC%E6%80%A7/"/>
      <url>/blogger/2020/08/06/vuex-2%E5%B1%AC%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>目的: 管理資料狀態.資料儲存 (類似 data )。</p><p>將 component 頁面中需要放到 VueX 管理的 data 資料放到 state 裡統一控制，<br>修改的 data 換成使用 computed 回傳值。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 資料夾 src&#x2F;store&#x2F;index.js 中</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isLoading:false,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; component 頁面(store前面記得加$)</span><br><span class="line">computed:&#123;</span><br><span class="line">  isLoading()&#123;</span><br><span class="line">    return this.$store.state.isLoading;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>處理資料 state 的狀態(改變資料內容)。</p><ul><li>改動 state，(這邊改 devtools 也會變)</li><li>執行同步行為</li><li>使用常數(全都大寫名稱來區分.也可以不這樣用)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123; </span><br><span class="line">  &#x2F;&#x2F; LOADING 跟 actions 的 updateLoading 提交的名稱有關</span><br><span class="line">  &#x2F;&#x2F; 第一個填 state，第二個要傳的資料 (payload).太多資料用物件</span><br><span class="line">  LOADING (state, payload) &#123;</span><br><span class="line">    state.isLoading &#x3D; payload;</span><br><span class="line">  &#125;,</span><br><span class="line">  INCREMENT (state, payload) &#123;</span><br><span class="line">    state.count +&#x3D; payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="使用-commit-觸發"><a href="#使用-commit-觸發" class="headerlink" title="使用 commit 觸發"></a>使用 commit 觸發</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; component 的 methods 中使用</span><br><span class="line">store.commit(&#39;LOADING&#39;, true);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 物件方式.第二個可以放比較多參數(但如果沒有全放只改要改的值.其他參數會不見出錯)</span><br><span class="line">store.commit(&#39;INCREMENT&#39;, &#123;</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;);</span><br><span class="line">store.commit(&#123;</span><br><span class="line">  type: &#39;INCREMENT&#39;,</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; actions 中使用</span><br><span class="line">actions: &#123; </span><br><span class="line">  &#x2F;&#x2F; LOADING 是 updateLoading 提交的「 Mutation 名稱」</span><br><span class="line">  updateLoading(context,changeStatus)&#123;</span><br><span class="line">    &#x2F;&#x2F; 改變資料這樣寫</span><br><span class="line">    context.commit(&#39;LOADING&#39;,changeStatus);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="網頁開發者工具中"><a href="#網頁開發者工具中" class="headerlink" title="網頁開發者工具中"></a>網頁開發者工具中</h4><p>只要觸發在 Filter mutations 搜尋的下面會看到觸發的時點和名稱<br>畫面右邊會顯示 state、mutations 的狀況<br>(state、mutations 的資料要同步才正常)</p><hr><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><ul><li>操作一些動作(類似 methods )、取得遠端資料(不會改變資料狀態)<br>處理 API (非同步、取得遠端資 ajax )、setTimeout (資料處理是在 mutations )。</li><li>可以串接很多功能( mutations 和其他的 actions)，也可以拿getters、state的資料<br>注意資料的順序方向.不要逆向。</li></ul><h4 id="context-屬性"><a href="#context-屬性" class="headerlink" title="context 屬性"></a>context 屬性</h4><ul><li><p>使用範例.第一位是 context 屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123; </span><br><span class="line">  updateLoading(context,changeStatus)&#123;</span><br><span class="line">    context.commit(&#39;LOADING&#39;,changeStatus);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>context 有下面這些屬性 (** 注意是 context 中有這些)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  state,      &#x2F;&#x2F; 等同於 &#96;store.state&#96;，若在模版中則為局部狀態</span><br><span class="line">  commit,     &#x2F;&#x2F; 等同於 &#96;store.commit&#96;</span><br><span class="line">  dispatch,   &#x2F;&#x2F; 等同於 &#96;store.dispatch&#96;</span><br><span class="line">  getters,    &#x2F;&#x2F; 等同於 &#96;store.getters&#96;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 下面2個使用 modules 才有</span><br><span class="line">  rootState,  &#x2F;&#x2F; 等同於 &#96;store.state&#96;，只存在於模版中</span><br><span class="line">  rootGetters &#x2F;&#x2F; 等同於 &#96;store.getters&#96;，只存在於模版中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-dispatch-呼叫"><a href="#使用-dispatch-呼叫" class="headerlink" title="使用 dispatch 呼叫"></a>使用 dispatch 呼叫</h4><ul><li><p>在 component 的 methods 中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&#39;名稱&#39;,true);</span><br></pre></td></tr></table></figure></li><li><p>在 actions 中使用其他的 function<br>使用 context 下的 dispatch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.dispatch(&#39;名稱&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;例子</span><br><span class="line">this.aaa();   &#x2F;&#x2F; 原本呼叫 aaa function 的方式</span><br><span class="line">context.dispatch(&#39;aaa&#39;);   &#x2F;&#x2F; 變成這樣呼叫</span><br></pre></td></tr></table></figure></li><li><p>很多參數需要傳的狀況下「全部用物件」方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this.selectCategory(categoryStyle, false); &#x2F;&#x2F; 原本</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 修改</span><br><span class="line">context.dispatch(&#123;</span><br><span class="line">  type: &#39;selectCategory&#39;,</span><br><span class="line">  style: categoryStyle,</span><br><span class="line">  isPageClick: false</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>action 中.太多參數要用物件傳入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectCategory (context, &#123;style, isPageClick&#125;) &#123;...&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="mapActions-針對-methods-簡化"><a href="#mapActions-針對-methods-簡化" class="headerlink" title="mapActions 針對 methods 簡化"></a>mapActions 針對 methods 簡化</h4><ul><li><p>原本 component 中的樣子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  &#x2F;&#x2F; 這可以簡化</span><br><span class="line">  addCartProductIn() &#123;</span><br><span class="line">    this.$store.dispatch(&#39;addCartProductIn&#39;);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 這無法簡化.因為有參數需要傳入</span><br><span class="line">  changeNum(num) &#123;</span><br><span class="line">    this.$store.dispatch(&#39;changeNum&#39;, num)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>修改 step 1<br>component 中引入 mapActions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters, mapActions &#125; from &#39;vuex&#39;; &#x2F;&#x2F; 加入這段(沒 mapGetters 就刪除 mapGetters)</span><br><span class="line">export default &#123;...&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改 step 2<br>改變 component 中的設定<br>注意:需要帶參數進去的無法縮減</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  changeNum(num) &#123;</span><br><span class="line">    this.$store.dispatch(&#39;changeNum&#39;, num); &#x2F;&#x2F; 無法縮減 </span><br><span class="line">  &#125;,</span><br><span class="line">  ...mapActions([&#39;addCartProductIn&#39;]), &#x2F;&#x2F; 改這邊</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h3><p>VueX 中太多參數要傳遞.都是用物件方式(解構)<br>因為是解構所以參數可以直接用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; component 頁面</span><br><span class="line">addtoCart(id, qty &#x3D; 1) &#123;   &#x2F;&#x2F; 「&#x3D; 1」預設值的意思</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 原本參數太多</span><br><span class="line">  &#x2F;&#x2F; this.$store.dispatch(&#39;addtoCart&#39;,id, qty);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 用物件包起來</span><br><span class="line">  this.$store.dispatch(&#39;addtoCart&#39;,&#123;id, qty&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; vuex 裡面</span><br><span class="line">addtoCart(context, &#123;id, qty&#125;) &#123;  &#x2F;&#x2F;注意!不要寫上預設值。解構-&gt;直接用參數即可</span><br><span class="line">  const vm &#x3D; this;</span><br><span class="line">  const url &#x3D; &#96;$&#123;process.env.APIPATH&#125;&#x2F;api&#x2F;$&#123;process.env.CUSTOMPATH&#125;&#x2F;cart&#96;;</span><br><span class="line">  const item &#x3D; &#123;</span><br><span class="line">    product_id: id,</span><br><span class="line">    qty,</span><br><span class="line">  &#125;;</span><br><span class="line">  context.commit(&#39;LOADING&#39;,true)</span><br><span class="line">  axios.post(url, &#123; data: item &#125;).then((response) &#x3D;&gt; &#123;</span><br><span class="line">    context.commit(&#39;LOADING&#39;,false)</span><br><span class="line">    context.dispatch(&#39;getCart&#39;);</span><br><span class="line">    console.log(&#39;加入購物車:&#39;, response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueX - 1. 前言</title>
      <link href="/blogger/2020/08/05/vuex-1%E5%89%8D%E8%A8%80/"/>
      <url>/blogger/2020/08/05/vuex-1%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>針對大型專案使用</li><li>管理跨層(跨 component)的資料狀態<a id="more"></a>父子層可以用 emit、props 來傳遞資料。<br>同層級的用 $eventbus 來傳遞資料(適合簡單的情境.資料量大時容易亂掉)。<br>全域變數資料無法做雙向綁定。</li></ul><p>因此，大型專案很多層時不用上面這些換成 VueX 統一管理呼叫。</p><p><a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">官方文件</a></p><h3 id="安裝-VueX"><a href="#安裝-VueX" class="headerlink" title="安裝 VueX"></a>安裝 VueX</h3><p><a href="https://vuex.vuejs.org/zh/installation.html" target="_blank" rel="noopener">官方安裝</a><br>自己是使用 vue gui 這畫面後點下載 VueX ，就安裝好了。</p><h3 id="狀態"><a href="#狀態" class="headerlink" title="狀態"></a>狀態</h3><p>單向資料流.注意順序不要逆向<br><img src="https://vuex.vuejs.org/vuex.png" alt="VueX"></p><h4 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h4><ol><li>state 設定參數。</li><li>原本頁面使用 computed 引用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  isLoading()&#123;</span><br><span class="line">    return this.$store.state.isLoading;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Actions 操作類似 methods。</li><li>Mutations 改變 state 的狀態。</li><li>Getter 簡化寫法。</li><li>Modules 模組化。</li></ol><hr><h4 id="嚴謹模式-strict-true"><a href="#嚴謹模式-strict-true" class="headerlink" title="嚴謹模式  strict:true"></a>嚴謹模式  strict:true</h4><p>寫 VueX 語法不符合規範會跳錯<br>開發階段建議開著.產品階段建議關掉(因為耗資源)<br>可以在不同的模組裡面用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  strict: true,</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js</title>
      <link href="/blogger/2020/08/04/1-nuxt/"/>
      <url>/blogger/2020/08/04/1-nuxt/</url>
      
        <content type="html"><![CDATA[<h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>Vue 進階的框架，解決 Vue 開發上的問題<br>把一些設定都已經做好.解決一些繁瑣、需要手刻的部分.使開發更輕鬆<br>完成、上線、穩定</p><a id="more"></a><p>分成3種使用方式.下面3種整合在這工具裡面.<br>原本 SSR 要自己寫. render靠其他工具. spa要靠 vue cli .但是 nuxt 整合在一起</p><ul><li>Server Side Rendered<br>做 spa 單頁式網站最大的問題是 seo 比較難處理. vue 有提供 ssr 解決方案.但是 nuxt 處理起來會比較輕鬆。<br>前端會碰到 node.js ，server 這塊。<br>在網頁原始碼裡面會真的看到文字、網頁內容<br>可是用 vue cli 可能會出現</li></ul><p>這邊是網頁一開始進來的頁面( google 爬蟲只會爬一次)<br>如果有切換頁面是 Client Side Rendered</p><ul><li><p>Statically Generated 靜態產生<br>原本是打 API 產生在頁面上.現在可以把內容形成一個靜態網頁。很適合弄好丟到一個普通空間ex:github<br>靜態檔: 頁面永遠長那樣.畫面不會一直因為 API 一直變動</p></li><li><p>Single Page Application(SPA)<br>沒有ssr 原本的 vue，如果只做這個可以直接用 vue cli</p></li></ul><p>特色:</p><ul><li>自動 code 分割<br>不會全部一個 js 檔.這樣載第一個畫面時跑比較久</li><li>Server Side Rendered<br>提供 seo</li></ul><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><ul><li>安裝好 node.js</li><li>用 npx 比較方便<figure class="highlight plain"><figcaption><span>create-nuxt-app <project-name>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">會詢問很多東西.確認按 enter</span><br><span class="line">安裝 scss 套件 npm install node-sass sass-loader</span><br><span class="line"></span><br><span class="line">### 資料夾架構 Directory Structure</span><br><span class="line">- assets (會被打包)</span><br><span class="line">用到的支援檔.在這邊會壓縮、轉譯</span><br><span class="line">(圖片、css、sass、webfonts)</span><br><span class="line">- components</span><br><span class="line">模組.寫的 vue 檔</span><br><span class="line">- layouts</span><br><span class="line">排版.版型定位</span><br><span class="line">- pages</span><br><span class="line">每頁 router 要進的頁面(ex:首頁、產品頁...)</span><br><span class="line">透過資料夾結構來呈現router</span><br><span class="line">- plugins</span><br><span class="line">別人寫的組件 ex: axios、tweenmax...</span><br><span class="line">- static (不會被打包)</span><br><span class="line">靜態檔 ex:css、圖片不要壓縮的(ico)、js</span><br><span class="line">- server</span><br><span class="line">app.use(nuxt.render) 把 component 跑成網頁給使用者看.優點是只要寫一份前端程式就可以解決.不用寫2份程式</span><br><span class="line">用 php 困難的地方在怎麼把前端 vue component 轉譯成真的畫面</span><br><span class="line">進入點是 server&#x2F;index.js</span><br><span class="line"></span><br><span class="line">### 一般網頁調整成 nuxt</span><br><span class="line">1. 移動</span><br><span class="line">assets 資料夾: img、css、font</span><br><span class="line">static 資料夾: ico、js</span><br><span class="line">2. 引入上面檔案(link、script)</span><br><span class="line">nuxt.config.js 是一個 js 的物件導出</span><br><span class="line"></span><br><span class="line">引入 js</span><br></pre></td></tr></table></figure>//原本在 html 中<script src="assets/js/jquery.min.js"></script></li></ul><p>//更改在 nuxt.config.js<br>head:{<br>  script:[<br>    {src: “/js/jquery.min.js”, body:true},<br>    {src: “/js/browser.min.js”, body:true},<br>    {src: “/js/breakpoints.min.js”, body:true},<br>    {src: “/js/util.js”, body:true},<br>    {src: “/js/main.js”, body:true},<br>  ]<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">引入 css</span><br></pre></td></tr></table></figure><p> /* Global CSS */<br>  css: [<br>    “~/assets/css/main.css”<br>  ],</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;蚯蚓符號是 nuxt 代表跟目錄&lt;&#x2F;b&gt;</span><br><span class="line">注意檔案路徑.有些會不太一樣要確認( main.scss 裡面)</span><br><span class="line"></span><br><span class="line">### pages 檔案修改</span><br><span class="line">首頁資料移過去</span><br><span class="line"></span><br><span class="line">### 建立 nuxt 的主模板</span><br><span class="line">模板上 body 標籤上有元素</span><br></pre></td></tr></table></figure><body class="is-preload">...</body><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nuxt 無法直接執行 body 上的元素</span><br><span class="line">因此在資料夾一進來的地方建一個模板 index.html  (vue 中是在 public)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html >    <head >            </head>    <body class="is-preload" >        </body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在重啟一次 npm run dev</span><br><span class="line"></span><br><span class="line">### 改網站內的連結路徑</span><br><span class="line">記得用 ~ 開頭</span><br><span class="line"></span><br><span class="line">### 修正 main.js 的 bug</span><br><span class="line">頁面中 menu 的部分還是跑版</span><br><span class="line">在查看上面載入的 js 中發現 main.js 的 menu 地方跟 nuxt 衝突</span><br><span class="line">(main.js 是原本版型的運作原理)</span><br><span class="line">需要使用生命週期更改</span><br><span class="line"></span><br><span class="line">先在 layouts&#x2F;default.vue 的 template 下面</span><br><span class="line">使用下面這段</span><br></pre></td></tr></table></figure><script>export default{  mounted(){    var $window = $(window),      $body = $('body');      //copy main.js 的 menu 內容  }}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在把 main.js 中 menu 程式的部分移到上面程式的註解下方的位置</span><br><span class="line"></span><br><span class="line">重整網頁就可以顯示</span><br><span class="line">主要是調整程式跑的前後順序</span><br><span class="line">一開始的 main.js 先執行了.可是 el 還沒上去因此這段無法顯示.後來放到 mounted 裡面就抓的到</span><br><span class="line"></span><br><span class="line">### 增加新頁面</span><br><span class="line">- 在 pages 裡面新增一個 generic.vue 檔</span><br><span class="line">- 內容</span><br></pre></td></tr></table></figure><template>  <div>123</div></template><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在網址上增加 &#96;&#96;&#96;&#x2F;generic&#96;&#96;&#96; 看是否可以換過去</span><br><span class="line">成功就修改內容</span><br><span class="line"></span><br><span class="line">在 pages 資料夾中新增檔案優點是可以直接變成有 router</span><br><span class="line"></span><br><span class="line">### 共用地方變成 component</span><br><span class="line">在資料夾 components 中新增.檔案名習慣大寫開頭</span><br><span class="line">之後引入到需要的頁面</span><br></pre></td></tr></table></figure>import Header from "~/components/Header.vue";export default {  components: {    Header,  }}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">頁面使用的地方放上標籤 &#96;&#96;&#96;&lt;Header&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="nuxt-link-超連結"><a href="#nuxt-link-超連結" class="headerlink" title="nuxt-link 超連結"></a>nuxt-link 超連結</h3><p>換頁不會重整</p><p>傳統作法使用 <code>&lt;a href=&quot;/generic&quot;&gt;</code> 會跳頁<br>變成使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;nuxt-link to&#x3D;&quot;&#x2F;generic&quot; class&#x3D;&quot;link-style&quot;&gt;...</span><br><span class="line">&lt;&#x2F;nuxt-link&gt;</span><br></pre></td></tr></table></figure><p>改好 menu 頁面時發現切換時網頁的ico位置會重新跑<br>這是 menu 原本程式寫法需要修改.移除下面程式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.setTimeout(function() &#123;</span><br><span class="line">  window.location.href &#x3D; href;</span><br><span class="line">&#125;, 350);</span><br></pre></td></tr></table></figure><h3 id="使用-scss-改原本的樣式"><a href="#使用-scss-改原本的樣式" class="headerlink" title="使用 scss 改原本的樣式"></a>使用 scss 改原本的樣式</h3><p>在當個頁面使用下面這語法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="nuxt-頁面過渡-vue-transition"><a href="#nuxt-頁面過渡-vue-transition" class="headerlink" title="nuxt 頁面過渡 (vue transition)"></a>nuxt 頁面過渡 (vue transition)</h3><p>在 assets/sass/main.scss 中增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.page-enter-active,</span><br><span class="line">.page-leave-active&#123;</span><br><span class="line">  transition: opacity 0.27s;</span><br><span class="line">&#125;</span><br><span class="line">.page-enter,</span><br><span class="line">.page-leave-active&#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移除 assets/sass/layout/_menu.scss 檔案中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#wrapper &#123;</span><br><span class="line">  @include vendor(&#39;transition&#39;, &#39;opacity #&#123;_duration(menu)&#125; ease&#39;);</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上傳前修改設定檔"><a href="#上傳前修改設定檔" class="headerlink" title="上傳前修改設定檔"></a>上傳前修改設定檔</h3><p>到 nuxt.config.js 新增 router 的設定<br>並修改 head 中 script 的路徑]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  base: &#39;&#x2F;repository名稱&#x2F;&#39;</span><br><span class="line">&#125;,</span><br><span class="line">head: &#123;</span><br><span class="line">  link: [</span><br><span class="line">    &#123; rel: &#39;icon&#39;, type: &#39;image&#x2F;x-icon&#39;, href: &#39;&#x2F;repository名稱&#x2F;favicon.ico&#39; &#125;,</span><br><span class="line">  ],</span><br><span class="line">  script:[</span><br><span class="line">    &#123;src: &quot;&#x2F;repository名稱&#x2F;js&#x2F;jquery.min.js&quot;, body:true&#125;,</span><br><span class="line">    &#123;src: &quot;&#x2F;repository名稱&#x2F;js&#x2F;browser.min.js&quot;, body:true&#125;,</span><br><span class="line">    &#123;src: &quot;&#x2F;repository名稱&#x2F;js&#x2F;breakpoints.min.js&quot;, body:true&#125;,</span><br><span class="line">    &#123;src: &quot;&#x2F;repository名稱&#x2F;js&#x2F;util.js&quot;, body:true&#125;,</span><br><span class="line">    &#123;src: &quot;&#x2F;repository名稱&#x2F;js&#x2F;main.js&quot;, body:true&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="發布前"><a href="#發布前" class="headerlink" title="發布前"></a>發布前</h3><p>建置打包優化處理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>產生靜態檔案.產生一個 dist 檔站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run generate</span><br></pre></td></tr></table></figure><h2 id="在上傳到遠端"><a href="#在上傳到遠端" class="headerlink" title="在上傳到遠端"></a>在上傳到遠端</h2><h3 id="更深的主題-Server-side-render"><a href="#更深的主題-Server-side-render" class="headerlink" title="更深的主題 Server side render"></a>更深的主題 Server side render</h3><p>spa 網站最大的問題是 SEO，搜尋引擎比較難抓 vue render 出來的資料，所以使用 nuxt 通常是做 SSR 應用<br>就不會用 vue cli</p><p>用 spa 網頁文字是透過 vue 組建產生.所以搜尋引擎爬不到文字<br>所以 nuxt 最強是做 SSR 應用</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/blogger/2020/08/04/2-RESTful-API/"/>
      <url>/blogger/2020/08/04/2-RESTful-API/</url>
      
        <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>一套設計規範來協議前後端的API，比較不用花時間猜怎麼使用，送出後會有狀態碼顯示。</p><a id="more"></a><h3 id="三種元件組成："><a href="#三種元件組成：" class="headerlink" title="三種元件組成："></a>三種元件組成：</h3><ol><li>URL定位資源。(不同HTTP動詞有對應的URL寫法.寫在網址的最後面)</li><li>HTTP動詞描述操作：GET、POST、PUT、DELETE…(有很多種.常用的幾個)</li><li>Content Types 資源呈現方式：JSON、XML…。</li></ol><table><thead><tr><th>HTTP動詞</th><th>中文名稱</th><th>備註</th></tr></thead><tbody><tr><td>GET</td><td>獲取.讀取</td><td>從伺服器取出資料(一項或多項)。請求展示取得指定的資料</td></tr><tr><td>POST</td><td>新增</td><td>在伺服器新增資料(用在新增的動作store)</td></tr><tr><td>PUT</td><td>更新.替換</td><td>跟PATCH類似.一個</td></tr><tr><td>DELETE</td><td>刪除</td><td>destroy</td></tr><tr><td>-</td><td>-</td><td>-</td></tr><tr><td>PATCH</td><td>更新.替換</td><td>跟PUT類似.選取的批次。</td></tr><tr><td>HEAD</td><td>———–</td><td>跟GET方法相同，但沒有回應主體（response body）</td></tr><tr><td>OPTIONS</td><td>———–</td><td>描述指定資源的溝通方法</td></tr></tbody></table><p>每個資源都會有一個 url 位址，利用 url 去做一些事情會使用到 http 動詞</p><p> → 一個檔案：變數{id}。多個檔案：陣列方式丟變數。</p><p> → 加「?」是非必填，不用加參數。</p><ul><li>(思考)為何delete 不是對應 delete 而是 destroy?</li></ul><p>請求request 和 操作actions 的指令不同，一開始設定時有分開不要一樣。</p><p>4種標準方法： GET、POST、PUT、DELETE</p><p>7種RESTful actions：index、new、create、edit、update、show、destroy</p><p>(使用destroy可以做批次刪除多個檔案)</p><p><a href="https://stackoverflow.com/questions/14730451/why-the-ruby-on-rails-action-destroy-is-not-named-delete" target="_blank" rel="noopener">Why the Ruby on Rails action “destroy” is not named “delete”?</a></p><hr><p>RESTful<br>一種api架構的標準.規範後的形式固定、可讀性強<br>根據 users 名詞和 http 動詞就可以操作這些資源<br>每個資源都會有一個 url 位址，利用 url 去做事情會使用到 http 動詞。</p><p>1.使每個url代表一個資源<br>2.客戶端和服務器之間，傳遞這種資源的某種表現層(分離的好處-單獨開發部互相干擾)<br>狀態有關<br>3.客戶端透過 4個http 動詞對服務氣資源操作(get、post、put、delete)</p><p>HTTP METHOD 用在什麼情況?<br>網頁使用時.需要透過 HTTP動詞跟伺服器取資料或送資料</p><p>HTTP METHOD  請求網址                          請求方式</p><p>得到資料<br><a href="https://example.com/api/users" target="_blank" rel="noopener">https://example.com/api/users</a>     GET (獲取所有用戶信息)<br><a href="https://example.com/api/users/1" target="_blank" rel="noopener">https://example.com/api/users/1</a>   GET (獲取標識爲 1 用戶信息)  </p><p>新增<br><a href="https://example.com/api/users" target="_blank" rel="noopener">https://example.com/api/users</a>     POST (添加新的用戶)</p><p>編輯、更新<br><a href="https://example.com/api/users/1" target="_blank" rel="noopener">https://example.com/api/users/1</a>   PATCH (更新標識爲 1 用戶部分信息(批次))<br><a href="https://example.com/api/users/1" target="_blank" rel="noopener">https://example.com/api/users/1</a>   PUT (更新標識爲 1 用戶部分信息(一筆資料))</p><p>刪除<br><a href="https://example.com/api/users/1" target="_blank" rel="noopener">https://example.com/api/users/1</a>   DELETE (刪除標識爲 1 用戶信息)</p><p>HTTP 狀態碼也是有規律的</p><p>1<strong>請求未成功；<br>2</strong>請求成功、表示成功處理了請求的狀態代碼；<br>3<strong>請求被重定向、表示要完成請求，需要進一步操作。通常，這些狀態代碼用來重定向；<br>4</strong>請求錯誤這些狀態代碼表示請求可能出錯，妨礙了服務器的處理；<br>5**（服務器錯誤）這些狀態代碼表示服務器在嘗試處理請求時發生內部錯誤。這些錯誤可能是服務器本身的錯誤，而不是請求出錯。</p><p>CORS  是否可以跨網域撈取資料(開啟資料才能共享)<br>撈資料時有時會顯示 Access-Control-Allow-Origin  沒開啟(他擔心有資安問題<br>-如果真的需要撈但是被阻擋時:<br>a.把json格式的資料下載下來自己更新。<br>b.後端PHP、Node.js 的方式來撈取(透過自己寫的後端去撈資料，再渲染到自己的前端)</p>]]></content>
      
      
      
        <tags>
            
            <tag> RESTful API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - 動態路由 -點按鈕換頁面</title>
      <link href="/blogger/2020/08/04/4-vue-route/"/>
      <url>/blogger/2020/08/04/4-vue-route/</url>
      
        <content type="html"><![CDATA[<h3 id="params-設定動態路由"><a href="#params-設定動態路由" class="headerlink" title="params 設定動態路由"></a>params 設定動態路由</h3><ol><li><p>在 router/index.js 檔案裏面.要設定動態路由的 path 路徑裡面加上 <code>/:id</code>參數名稱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const routes &#x3D; [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;product&#x2F;:id&#39;,</span><br><span class="line">    name: &#39;product&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;..&#x2F;components&#x2F;product&#x2F;product.vue&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>那個頁面(後面先打其他的資料)<br>網址變成<code>http://localhost:8080/product/4</code><br>接下來在瀏覽器 f12 中的 vue 可以看到<br>$route 下 params:{ id: “4”}</p></li><li><p>設定預設的網址<br>設定 redirect 讓網頁沒有設定參數自己指引到這裡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#39;product&#39;,</span><br><span class="line">  redirect: &#39;product&#x2F;all&#39;, &#x2F;&#x2F; 預設網址</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: &#39;product&#x2F;:id&#39;,</span><br><span class="line">  name: &#39;product&#39;,</span><br><span class="line">  component: () &#x3D;&gt; import(&#39;..&#x2F;components&#x2F;product&#x2F;product.vue&#39;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p>如果參數可有可無的.在參數後面加上?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#39;product&#x2F;:id?&#39;,</span><br><span class="line">  name: &#39;product&#39;,</span><br><span class="line">  component: () &#x3D;&gt; import(&#39;..&#x2F;components&#x2F;product&#x2F;product.vue&#39;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="4"><li><p>抓到動態路由<br>可以在生命週期 created 裡面打<code>this.$route.params.id</code><br>注意$route要加”$”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  console.log(this.$route.params.id)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>點按鈕時.讓按鈕的值更換掉 $route.params.id 的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 先設定點擊不同按鈕時 name 的值會換</span><br><span class="line">const name &#x3D; a123;</span><br><span class="line">&#x2F;&#x2F; 在輸入下面這個.網址的id就可以換</span><br><span class="line">this.$router.push(&#96;&#x2F;product&#x2F;$&#123;name&#125;&#96;);</span><br></pre></td></tr></table></figure><p>接下來只要設定內容更換就可以了。</p></li></ol><p>一般比較喜歡使用params來處理網頁參數比較整齊<br>query比較是分頁、臨時使用的id</p><p><a href="https://ithelp.ithome.com.tw/articles/10197778" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10197778</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10214449" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10214449</a></p><hr><h4 id="導航守衛"><a href="#導航守衛" class="headerlink" title="導航守衛"></a>導航守衛</h4><p>用戶切換頁面才會觸發(單頁重整不會觸發)<br>beforeEach 切換頁面前觸發(要改網址)<br>to 即將要到的頁面， from 來自哪個頁面，next 到達下個頁面</p><p>指定頁面需不需要驗證.沒問題用 next 放行。<br>例子:身分驗證有沒有登入<br>在 main.js 最後的地方設定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  if(to.meta.requiresAuth)&#123; &#x2F;&#x2F;這裡需要驗證</span><br><span class="line">    const api &#x3D; &#96;$&#123;process.env.VUE_APP_API_PATH&#125;&#x2F;api&#x2F;user&#x2F;check&#96;; &#x2F;&#x2F; 檢查用戶是否登入的 api。</span><br><span class="line">        axios.post(api).then(response &#x3D;&gt; &#123;</span><br><span class="line">        if(response.data.success) &#123; &#x2F;&#x2F;驗證通過</span><br><span class="line">          next();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          alert(&#39;請先登入&#39;);</span><br><span class="line">          &#x2F;&#x2F;如果不是登錄的狀態回登錄的頁面..next裡面包個物件</span><br><span class="line">          next(&#123;</span><br><span class="line">            path:&#39;&#x2F;login&#39;, &#x2F;&#x2F;這是 router 那設定的路徑</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;else&#123; &#x2F;&#x2F;不用驗證的放行</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路由需要驗證的部分要加 <code>meta: { requiresAuth: true },</code><br>透過這個來驗證</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#39;&#x2F;login&#39;,</span><br><span class="line">  name: &#39;login&#39;,</span><br><span class="line">  component: () &#x3D;&gt; import(&#39;..&#x2F;components&#x2F;backend&#x2F;admin&#x2F;Login.vue&#39;)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: &#39;&#x2F;admin&#39;,</span><br><span class="line">  component: () &#x3D;&gt; import(&#39;..&#x2F;components&#x2F;backend&#x2F;admin&#x2F;Admin.vue&#39;),</span><br><span class="line">  meta: &#123; requiresAuth: true &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#39;,</span><br><span class="line">      name: &#39;admin_product&#39;,</span><br><span class="line">      component: () &#x3D;&gt; import(&#39;..&#x2F;components&#x2F;backend&#x2F;admin_product&#x2F;Admin_product.vue&#39;),</span><br><span class="line">      meta: &#123; requiresAuth: true &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6 的解構賦值</title>
      <link href="/blogger/2020/08/04/js-%E8%A7%A3%E6%A7%8B%E8%B3%A6%E5%80%BC/"/>
      <url>/blogger/2020/08/04/js-%E8%A7%A3%E6%A7%8B%E8%B3%A6%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="右方資料給到左方"><a href="#右方資料給到左方" class="headerlink" title="右方資料給到左方"></a>右方資料給到左方</h4><p>陣列裡的數量不夠時剩下的就不會賦值，<br>中間有空就會跳開<code>let [grandpa, , dad, mom, me]</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let family &#x3D; [&#39;阿公&#39;,&#39;阿嬤&#39;,&#39;爸&#39;,&#39;媽&#39;,&#39;我&#39;];</span><br><span class="line">let [grandpa, grandma, dad, mom, me] &#x3D; family;</span><br><span class="line">console.log(grandpa, grandma, dad, mom, me);</span><br></pre></td></tr></table></figure><ul><li><p>應用: 2個變數交換</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let aaa &#x3D; &#39;aaa&#39;;</span><br><span class="line">let bbb &#x3D; &#39;bbb&#39;;</span><br><span class="line">[aaa, bbb] &#x3D; [bbb, aaa];</span><br><span class="line">console.log(aaa,bbb)</span><br></pre></td></tr></table></figure></li><li><p>應用: 字串變陣列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &#39;我在練習中&#39;;</span><br><span class="line">let [a, b, c, d, e] &#x3D; str;</span><br><span class="line">console.log(a, b, c, d, e)</span><br></pre></td></tr></table></figure></li></ul><h4 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let family &#x3D; &#123;</span><br><span class="line">  dad: &#39;爸&#39;,</span><br><span class="line">  mom: &#39;媽&#39;,</span><br><span class="line">  me: &#39;我&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 取出一個值。(物件裡面放值，右邊是上面的物件)</span><br><span class="line">let &#123;dad&#125; &#x3D; family;</span><br><span class="line">console.log(dad); &#x2F;&#x2F; 顯示 &#39;爸&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 取出一個值後，讓它在新變數名稱上(dad是屬性，myFather新變數名稱)</span><br><span class="line">&#x2F;&#x2F; 右方 family 先取出 dad 的值，myFather 重新定這變數名稱。</span><br><span class="line">let &#123;dad:myFather&#125; &#x3D; family;</span><br><span class="line"></span><br><span class="line">console.log(dad, myFather);</span><br><span class="line">&#x2F;&#x2F; 顯示 dad-&gt;is not defined。 myFather-&gt;&#39;爸&#39;。</span><br></pre></td></tr></table></figure><p>複雜情況</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let &#123;dad:myFather, family: [,mom] &#125; &#x3D; &#123;dad: &#39;爸&#39;, family:[&#39;阿姨&#39;, &#39;媽&#39;, &#39;哥哥&#39;, &#39;弟弟&#39;]&#125;;</span><br><span class="line">console.log(myFather, mom) &#x2F;&#x2F; 顯示 &#39;爸&#39;,&#39;媽&#39;</span><br><span class="line">&#x2F;&#x2F; 雖然很複雜但先看右邊</span><br></pre></td></tr></table></figure><p>預設值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let [my &#x3D; &#39;我&#39;, dad &#x3D; &#39;爸&#39;] &#x3D; [&#39;我誰&#39;]</span><br><span class="line">console.log(my, dad)</span><br><span class="line">&#x2F;&#x2F; 顯示 &#39;我誰&#39;, &#39;爸&#39;</span><br><span class="line">&#x2F;&#x2F; 後面只有1個所以第一個不是用預設值</span><br><span class="line"></span><br><span class="line">let &#123;damily:my &#x3D; &#39;我&#39;&#125; &#x3D; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F;右邊沒傳值，物件會變成&#123;my: &#39;我&#39;&#125;</span><br></pre></td></tr></table></figure><p>也可以這樣用<br>有時候一個位置要放2個參數.就用物件的方式傳入<br>裡面的參數可以直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc(context, &#123;id, item&#125;)&#123;</span><br><span class="line">  console.log(context, id, item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非同步(異步)</title>
      <link href="/blogger/2020/08/04/3-AJAX-%E7%95%B0%E9%83%A8/"/>
      <url>/blogger/2020/08/04/3-AJAX-%E7%95%B0%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在 JavaScript 中程式一次只執行一件事情，<br>非同步的特色: 全部程式執行完.最後才會執行。<br>(事情先放到 “event queue 事件佇列” 裡面)<br>有時間差.沒辦法確定什麼時間開始執行、完畢。</p><a id="more"></a><p>非同步程式:<br>setTimeout、addEventListener、AJAX相關…<br>(需要花時間等待.但主要程式不會等。)</p><p>解決方式3種:</p><ul><li>Callbacks(回呼函式)</li><li>Promise(物件-承諾)</li><li>Async(語法-非同步)/ Await(等待)</li></ul><p>範例 1.一般同步的程式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;clickFun()&quot;&gt;click&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function number(n1, n2)&#123;</span><br><span class="line">    return n1+n2;</span><br><span class="line">  &#125;</span><br><span class="line">  function clickFun()&#123;</span><br><span class="line">    let res &#x3D; number(4, 8);</span><br><span class="line">    console.log(res); &#x2F;&#x2F; 12</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>範例 2.加入非同步的程式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function number(n1, n2, delayTime)&#123;</span><br><span class="line">  console.log(&#39;a&#39;)</span><br><span class="line">  setTimeout(function()&#123;  &#x2F;&#x2F;加入非同步程式</span><br><span class="line">    console.log(&#39;b&#39;)</span><br><span class="line">    return n1+n2;</span><br><span class="line">  &#125;,delayTime);</span><br><span class="line">  console.log(&#39;c&#39;)</span><br><span class="line">&#125;</span><br><span class="line">function clickFun()&#123;</span><br><span class="line">  let res &#x3D; number(4, 8, 2000);</span><br><span class="line">  console.log(res);  &#x2F;&#x2F;undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顯示順序: a c undefined b</p><p>為了解決上面抓不到值、時間順序的問題.<br>有下面3種方法把資料抓出來。</p><h4 id="Callbacks-回呼函式"><a href="#Callbacks-回呼函式" class="headerlink" title="Callbacks(回呼函式)"></a>Callbacks(回呼函式)</h4><p>使用函式當參數用。</p><p>(第9行是一個函式當參數傳遞到第一行的 callback 這參數使用。<br>第3行是利用這參數名稱呼叫，把值回傳回去，所以第10行才有結果。)<br>按了之後要等設定的2秒鐘.才會回傳對的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function number(n1, n2, delayTime, callback)&#123;</span><br><span class="line">  setTimeout(function()&#123;  </span><br><span class="line">    callback(n1+n2);  &#x2F;&#x2F;把資料帶出去</span><br><span class="line">  &#125;,delayTime);</span><br><span class="line">&#125;</span><br><span class="line">function clickFun()&#123;</span><br><span class="line">  &#x2F;&#x2F; 刪除 let res &#x3D; number(4, 8, 2000);</span><br><span class="line">  &#x2F;&#x2F; 整個換掉  </span><br><span class="line">  number(4, 8, 2000, function(res)&#123;</span><br><span class="line">    console.log(res);  &#x2F;&#x2F;undefined</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-物件-承諾"><a href="#Promise-物件-承諾" class="headerlink" title="Promise(物件-承諾)"></a>Promise(物件-承諾)</h4><p>要使用 return </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function number(n1, n2, delayTime, callback)&#123;</span><br><span class="line">  setTimeout(function()&#123;  </span><br><span class="line">    callback(n1+n2);  &#x2F;&#x2F;把資料帶出去</span><br><span class="line">  &#125;,delayTime);</span><br><span class="line">&#125;</span><br><span class="line">function clickFun()&#123;</span><br><span class="line">  &#x2F;&#x2F; 刪除 let res &#x3D; number(4, 8, 2000);</span><br><span class="line">  &#x2F;&#x2F; 整個換掉  </span><br><span class="line">  number(4, 8, 2000, function(res)&#123;</span><br><span class="line">    console.log(res);  &#x2F;&#x2F;undefined</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Select 改樣式 - 用 ul、li 改寫</title>
      <link href="/blogger/2020/08/03/select/"/>
      <url>/blogger/2020/08/03/select/</url>
      
        <content type="html"><![CDATA[<p>有時候想改更多 select 的樣式<br>但原本 select、option 標籤能改的有限.因此換成使用 ul、li 重新構成選單。</p><div class="select">  <div onclick="toggleFun()">    <span id="selectName">請選擇地區</span>    <i class="fas fa-caret-down"></i>  </div>  <ul id="list" class="d-none" onmouseleave="listMouseLeave()">  </ul></div><script>const liAry = ['北部','中部','南部','東部','離島'];const selectUl = document.querySelector('#list');const selectLi = document.querySelector('#list li');const selectName = document.querySelector('#selectName');//listlet html_list = "";liAry.forEach(el => {  html_list+= `<li>${el}</li>`;})selectUl.innerHTML = html_list;//click togglefunction toggleFun(){  if(selectUl.className === ''){    selectUl.classList.add('d-none');  }else{    selectUl.classList.remove('d-none');  }}function listMouseLeave(){  selectUl.classList.add('d-none');}// click liselectUl.addEventListener('click',function(e){  selectName.innerHTML = e.target.innerText;  selectUl.classList.add('d-none');})</script><style>  .d-none{    display:none;  }  .select{    margin-top: 1rem;    margin-bottom: 30px;    position: relative;  }  .select div{    cursor: pointer;    display: flex;    justify-content: space-between;    align-items: center;    padding: 7px 15px;    border-width: 2px;    border-style: solid;    border-color: #569784 #569784 #a2cabf #a2cabf;  }  .select ul{    cursor: pointer;    border-width: 2px;    border-style: solid;    border-color: #569784 #569784 #a2cabf #a2cabf;    position: absolute;    top: 35px;    left: 0;    background-color: #fff;    width: 100%;    z-index: 30;    padding-left: 0;    list-style: none;    box-sizing: border-box;    /* height: 230px;    overflow-y: scroll; */  }  .select li{    cursor: pointer;    padding: 4px 15px;  }  .select li:hover{      background-color:  #a2cabf;    }</style><a id="more"></a><h3 id="使用-Vue-js-的方式"><a href="#使用-Vue-js-的方式" class="headerlink" title="使用 Vue.js 的方式"></a>使用 Vue.js 的方式</h3><h4 id="html架構"><a href="#html架構" class="headerlink" title="html架構"></a>html架構</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;select&quot;&gt;</span><br><span class="line">  &#x2F;&#x2F; 顯示的地方</span><br><span class="line">  &lt;div @click&#x3D;&quot;selectToggle &#x3D; !selectToggle&quot;&gt;</span><br><span class="line">    &#123;&#123;selectArea&#125;&#125;</span><br><span class="line">    &lt;i class&#x3D;&quot;fas fa-caret-down&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 下拉區域</span><br><span class="line">  &#x2F;&#x2F; mouseleave &#x3D;&gt; 滑鼠移開下拉要關起來 </span><br><span class="line">  &lt;ul v-show&#x3D;&quot;selectToggle&quot; @mouseleave&#x3D;&quot;selectToggle &#x3D; false&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(item,index) in counties&quot; :key&#x3D;&quot;item.SiteId&quot;</span><br><span class="line">        @click&#x3D;&quot;selectFunction(item)&quot;&gt;</span><br><span class="line">      &#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h4 id="scss-樣式"><a href="#scss-樣式" class="headerlink" title="scss 樣式"></a>scss 樣式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$primary-green: #569784;</span><br><span class="line">.select&#123;</span><br><span class="line">  margin-top: 1rem;</span><br><span class="line">  margin-bottom: 30px;</span><br><span class="line">  position: relative;</span><br><span class="line">  div&#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    width: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">    padding: 7px 15px;</span><br><span class="line">    border-width: 2px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: $primary-green $primary-green lighten($primary-green,25%) lighten($primary-green,25%);</span><br><span class="line">  &#125;</span><br><span class="line">  ul&#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    border-width: 2px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: $primary-green $primary-green lighten($primary-green,25%) lighten($primary-green,25%);</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 40px;</span><br><span class="line">    left: 0;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    width: 100%;</span><br><span class="line">    z-index: 30;</span><br><span class="line">  &#125;</span><br><span class="line">  li&#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    padding: 4px 15px;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">      background-color: lighten($primary-green,40%);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vue-的程式部分"><a href="#vue-的程式部分" class="headerlink" title="vue 的程式部分"></a>vue 的程式部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  allData:[], &#x2F;&#x2F; 預先的所有資料</span><br><span class="line">  nowData:[], &#x2F;&#x2F; 現在塞選過使用的資料</span><br><span class="line">  selectToggle:false, &#x2F;&#x2F; 下拉選單的切換</span><br><span class="line">  selectArea:&#39;請選擇地區&#39;, &#x2F;&#x2F; 選擇後的文字顯示 </span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  selectFunction(item)&#123;</span><br><span class="line">    &#x2F;&#x2F; 點擊下拉選單後塞選資料</span><br><span class="line">    const nowSelectArea &#x3D; [];</span><br><span class="line">    this.allData.forEach(el &#x3D;&gt; &#123;</span><br><span class="line">      if(el.County &#x3D;&#x3D;&#x3D; item)&#123;</span><br><span class="line">        nowSelectArea.push(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    this.nowData &#x3D; nowSelectArea; &#x2F;&#x2F; 現在塞選過的資料</span><br><span class="line">    this.selectArea &#x3D; item; &#x2F;&#x2F; select 顯示的文字</span><br><span class="line">    this.selectToggle &#x3D; false; &#x2F;&#x2F; 點選下拉選單後.讓選單關閉</span><br><span class="line">    this.sortPage(this.nowData); &#x2F;&#x2F;重新整理頁面.顯示新的資料</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="使用-Javascript-的方式"><a href="#使用-Javascript-的方式" class="headerlink" title="使用 Javascript 的方式"></a>使用 Javascript 的方式</h3><h4 id="html架構-1"><a href="#html架構-1" class="headerlink" title="html架構"></a>html架構</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;select&quot;&gt;</span><br><span class="line">  &lt;div onclick&#x3D;&quot;toggleFun()&quot;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;selectName&quot;&gt;請選擇地區&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;fas fa-caret-down&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;ul id&#x3D;&quot;list&quot; class&#x3D;&quot;d-none&quot; onmouseleave&#x3D;&quot;listMouseLeave()&quot;&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h4 id="css-樣式"><a href="#css-樣式" class="headerlink" title="css 樣式"></a>css 樣式</h4><p>把上面 scss 的巢狀拆開，並加入下面這個 class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.d-none&#123;</span><br><span class="line">    display:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="javascript-程式的部分"><a href="#javascript-程式的部分" class="headerlink" title="javascript 程式的部分"></a>javascript 程式的部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const liAry &#x3D; [&#39;北部&#39;,&#39;中部&#39;,&#39;南部&#39;,&#39;東部&#39;,&#39;離島&#39;];</span><br><span class="line">const selectUl &#x3D; document.querySelector(&#39;#list&#39;);</span><br><span class="line">const selectLi &#x3D; document.querySelector(&#39;#list li&#39;);</span><br><span class="line">const selectName &#x3D; document.querySelector(&#39;#selectName&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;list</span><br><span class="line">let html_list &#x3D; &quot;&quot;;</span><br><span class="line">liAry.forEach(el &#x3D;&gt; &#123;</span><br><span class="line">  html_list+&#x3D; &#96;&lt;li&gt;$&#123;el&#125;&lt;&#x2F;li&gt;&#96;;</span><br><span class="line">&#125;)</span><br><span class="line">selectUl.innerHTML &#x3D; html_list;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;click toggle</span><br><span class="line">function toggleFun()&#123;</span><br><span class="line">  if(selectUl.className &#x3D;&#x3D;&#x3D; &#39;&#39;)&#123;</span><br><span class="line">    selectUl.classList.add(&#39;d-none&#39;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    selectUl.classList.remove(&#39;d-none&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function listMouseLeave()&#123;</span><br><span class="line">  selectUl.classList.add(&#39;d-none&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; click li</span><br><span class="line">selectUl.addEventListener(&#39;click&#39;,function(e)&#123;</span><br><span class="line">  selectName.innerHTML &#x3D; e.target.innerText;</span><br><span class="line">  selectUl.classList.add(&#39;d-none&#39;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網頁動畫、特效(2)- Gsap3 + Vue.js</title>
      <link href="/blogger/2020/07/17/animate-gasp/"/>
      <url>/blogger/2020/07/17/animate-gasp/</url>
      
        <content type="html"><![CDATA[<h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p><a href="https://hackmd.io/@chupai/SJStDfFV8#GSAP3" target="_blank" rel="noopener">GSAP3：專門處理動畫與特效的 JS 套件</a></p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p><a href="https://greensock.com/docs/v3/Installation?checked=core" target="_blank" rel="noopener">官方各種安裝方式</a></p><a id="more"></a><ol><li><p>npm 安裝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gsap</span><br></pre></td></tr></table></figure></li><li><p>引入專案中<br>上面官方網站 npm 安裝的部分<br>有些插件可以挑選.這次需要 ScrollTrigger (頁面滑到才動)<br>另外目前設定只有專案的首頁需要用到.所以在那 component 頁面打下面的指令引入 3行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; gsap &#125; from &quot;gsap&quot;;</span><br><span class="line">import &#123; ScrollTrigger &#125; from &quot;gsap&#x2F;ScrollTrigger&quot;;</span><br><span class="line">gsap.registerPlugin(ScrollTrigger);</span><br><span class="line"></span><br><span class="line">export default &#123;...&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>gsap 是使用 id 或 class 操作動畫。</p><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gsap.method(&#39;selector&#39;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用例子 1</span><br><span class="line">gsap.to(&quot;.a&quot;, &#123;color: &#39;#ccc&#39;, duration: 2&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用例子 2</span><br><span class="line">gasp.from (&quot;.a&quot;, &#123;</span><br><span class="line">  duration:3, x:&quot;-50vw&quot;, rotation:-300, ease:&quot;linear&quot;,</span><br><span class="line">  scrollTrigger:&#123;</span><br><span class="line">    trigger:&quot;.a&quot;,</span><br><span class="line">    markers:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="測試專案-gsap-是否安裝成功"><a href="#測試專案-gsap-是否安裝成功" class="headerlink" title="測試專案 gsap 是否安裝成功"></a>測試專案 gsap 是否安裝成功</h4><p>(成功的話 #h1 出現在畫面中會右移)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 id&#x3D;&quot;h1&quot;&gt;我是標題&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; gsap &#125; from &quot;gsap&quot;;</span><br><span class="line">import &#123; ScrollTrigger &#125; from &quot;gsap&#x2F;ScrollTrigger&quot;;</span><br><span class="line">gsap.registerPlugin(ScrollTrigger);</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    gsap.to(&quot;#h1&quot;, &#123;x: 100, duration: 1&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="ScrollTrigger-滾動觸發"><a href="#ScrollTrigger-滾動觸發" class="headerlink" title="ScrollTrigger 滾動觸發"></a>ScrollTrigger 滾動觸發</h3><p><a href="https://www.youtube.com/watch?v=X7IBa7vZjmo" target="_blank" rel="noopener">Introducing ScrollTrigger for GSAP</a></p><p>注意: scrollTrigger (要小寫s開頭).不然會顯示找不到這插件 !</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gsap.to(&quot;#h1&quot;, &#123; &#x2F;&#x2F;要觸發的元素</span><br><span class="line">  scrollTrigger:&#123; &#x2F;&#x2F;頁面滑動觸發設定</span><br><span class="line">    trigger: &quot;#product1&quot;,  &#x2F;&#x2F;要觸發的元素</span><br><span class="line">    start: &quot;top center&quot;, &#x2F;&#x2F;第一個值:元素的開始位置，第二個值:畫面的位置</span><br><span class="line">    end: &quot;bottom 100px&quot; &#x2F;&#x2F; 同 start 用法</span><br><span class="line">    marker: true, &#x2F;&#x2F;顯示提示字.會顯示設定、物件的開始結束</span><br><span class="line">    toggleActions: &quot;restart none none none&quot;  &#x2F;&#x2F;切換動作</span><br><span class="line">  &#125;,</span><br><span class="line">  x: 400, &#x2F;&#x2F;外部這是要改變的效果</span><br><span class="line">  duration:2</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="start-可放的值"><a href="#start-可放的值" class="headerlink" title="start 可放的值"></a>start 可放的值</h4><p>top、center、bottom、pixels、percentages(relative to top)</p><h4 id="toggleActions-可以放4個值-依序跑"><a href="#toggleActions-可以放4個值-依序跑" class="headerlink" title="toggleActions 可以放4個值.依序跑"></a>toggleActions 可以放4個值.依序跑</h4><table><thead><tr><th>值</th><th>說明</th></tr></thead><tbody><tr><td>play</td><td>只跑一次</td></tr><tr><td>pause</td><td>暫停</td></tr><tr><td>resume</td><td>繼續</td></tr><tr><td>reverse</td><td>逆轉</td></tr><tr><td>restart</td><td>重複跑</td></tr><tr><td>reset</td><td>重置</td></tr><tr><td>complete</td><td>完成</td></tr><tr><td>none</td><td>無</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Gsap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 網頁特效 </tag>
            
            <tag> Gsap </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網頁動畫、特效(1)- Animation、Transition</title>
      <link href="/blogger/2020/07/15/animate-animation-transition/"/>
      <url>/blogger/2020/07/15/animate-animation-transition/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>製作網頁的動畫、特效以前是用 JavaScript、Flash，後來 css3 增加了一些屬性，變成開發時間可以縮短，透過 css 交給瀏覽器處理也比較不吃資源。</p><a id="more"></a><p>要把效果做好有幾個關鍵字可以研究：</p><ul><li>動畫：css Animation</li><li>過度、轉場：css Transition</li><li>變形：transform 2D、transform 3D<br>基本的有概念後就可以開始找範例解析試模仿寫看看。</li></ul><p>這次紀錄研究 Animation、Transition 後，搭配 scrollmagic、gsap，<br>讓網頁使用起來多點效果不那麼死硬的過程，<br>transform 這次比較用不到所以先跳過。</p><hr><h3 id="CSS3-Animation"><a href="#CSS3-Animation" class="headerlink" title="CSS3 Animation"></a>CSS3 Animation</h3><p>動畫也稱為影格動畫，可以設定比較細緻的效果。<br>動畫是直接執行的。</p><h4 id="語法簡寫順序"><a href="#語法簡寫順序" class="headerlink" title="語法簡寫順序"></a>語法簡寫順序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation: [name 名稱] [duration 時間] | [timing-function 執行效果] | [delay 延遲] | [iteration-count 重複次數] | [direction 方向] | [fill-mode 播放前後模式] | [play-state 播放狀態];</span><br></pre></td></tr></table></figure><p>要搭配關鍵影格 @keyframes 才可以用，畢竟沒有時間設定開始結束做什麼無法跑呀。</p><table><thead><tr><th>屬性</th><th>說明</th><th>補充</th></tr></thead><tbody><tr><td>animation-name</td><td>名稱。@keyframes 後面的名稱</td><td>@keyframes 搭配 from、to。</td></tr><tr><td>animation-duration</td><td>執行時間(s 秒或 ms 毫秒)，預設0</td><td></td></tr><tr><td>animation-timing-function</td><td>執行效果(速度曲線)</td><td><a href="https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp" target="_blank" rel="noopener">w3schools</a></td></tr><tr><td>animation-delay</td><td>延遲(間隔多久後開始)，預設0</td><td></td></tr><tr><td>animation-iteration-count</td><td>重覆執行次數，預設 1</td><td>infinite 無限次</td></tr><tr><td>animation-direction</td><td>執行方向。預設 normal</td><td>reverse 反向、alternate 先正後反、alternate-reverse先反後正</td></tr><tr><td>animation-fill-mode</td><td>播放前後模式，預設 none</td><td>forwards、backwards、both</td></tr><tr><td>animation-play-state</td><td>播放或暫停狀態，預設 running</td><td>paused 暫停</td></tr></tbody></table><h4 id="keyframes-關鍵影格設定方式"><a href="#keyframes-關鍵影格設定方式" class="headerlink" title="@keyframes 關鍵影格設定方式"></a>@keyframes 關鍵影格設定方式</h4><ul><li><p>公式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@keyframes 動畫名稱 &#123;</span><br><span class="line">  時間1 &#123;css 樣式&#125;</span><br><span class="line">  時間2 &#123;css 樣式&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意動畫名稱大小寫，不同大小寫是不同字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 下面2個是不同的動畫</span><br><span class="line">@keyframes Abc&#123;&#125;</span><br><span class="line">@keyframes ABC&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>設定時間有2種方式:</p><ol><li>from、to : 一開始和最後的效果(0%、100%)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@keyframes animate1 &#123;</span><br><span class="line">  from &#123;background-color:red; margin-left:0;&#125;</span><br><span class="line">  to &#123;background-color:black; margin-left:50px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>0-100% : 幾 % 時做什麼事<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@keyframes animate2 &#123;</span><br><span class="line">  0% &#123;background-color:red; margin-left:0;&#125;</span><br><span class="line">  50% &#123;background-color:blue; margin-left:100px;&#125;</span><br><span class="line">  100% &#123;background-color:black; margin-left:50px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="套用效果"><a href="#套用效果" class="headerlink" title="套用效果"></a>套用效果</h4><style>  .animate123{    width:50px;    height:50px;    animation: animate2 3s ease 1s infinite alternate;    background-color:red;    margin-bottom:10px;  }  @keyframes animate2 {    0% {background-color:red; margin-left:0;}    50% {background-color:blue; margin-left:100px;}    100% {background-color:black; margin-left:50px;}  }</style><div class="animate123"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  width:50px;</span><br><span class="line">  height:50px;</span><br><span class="line">  animation: animate2 3s ease 1s infinite alternate;</span><br><span class="line">  background-color:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes animate2 &#123;</span><br><span class="line">  0% &#123;background-color:red; margin-left:0;&#125;</span><br><span class="line">  50% &#123;background-color:blue; margin-left:100px;&#125;</span><br><span class="line">  100% &#123;background-color:black; margin-left:50px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.oxxostudio.tw/articles/201803/css-animation.html" target="_blank" rel="noopener">完整解析 CSS 動畫</a></p><h4 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h4><p>CSS3 Animate 有太多要設定，有人整理成一個css檔方便使用，只要會引用、使用就可以操作。<br><a href="https://animate.style/" target="_blank" rel="noopener">Animate.css</a></p><p>Vue.js中使用方式<br><a href="https://blog.csdn.net/qq_39009348/article/details/81144296" target="_blank" rel="noopener">animate.css在vue项目中的使用</a></p><p>操作流程:</p><ol><li><p>下載安裝</p></li><li><p>在想要動畫的地方放 css，每個想要的特效前面都要加<code>animate__animated</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class&#x3D;&quot;title animate__animated animate__bounce&quot;&gt;title&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果希望可以調整的更多.有2種方式:<br>a. 在設定的 css 上面寫 animation 就可以控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .title&#123;</span><br><span class="line">    animation-duration: 2s;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>b. 也可以在原本的地方增加其他 css 屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class&#x3D;&quot;title animate__animated animate__bounce animate__faster&quot;&gt;title&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>效果</th><th>屬性名稱</th><th>成效</th></tr></thead><tbody><tr><td>延遲</td><td>animate__delay-2s<br>animate__delay-3s<br>animate__delay-4s<br>animate__delay-5s</td><td>2s<br>3s<br>4s<br>5s</td></tr><tr><td>速度</td><td>animate__slow<br>animate__slower<br>animate__fast<br>animate__faster</td><td>2s<br>3s<br>800ms<br>500ms</td></tr><tr><td>重複</td><td>animate__repeat-1<br>animate__repeat-2<br>animate__repeat-3<br>animate__infinite</td><td>1<br>2<br>3<br>infinite(無限重複)</td></tr></tbody></table></li></ol><hr><h3 id="CSS3-Transition-語法"><a href="#CSS3-Transition-語法" class="headerlink" title="CSS3 Transition 語法"></a>CSS3 Transition 語法</h3><p>動畫效果需要觸發、只能跑一次，適合用在頁面轉場。</p><h4 id="語法簡寫順序-1"><a href="#語法簡寫順序-1" class="headerlink" title="語法簡寫順序"></a>語法簡寫順序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transition: [property 名稱] [duration 時間] [timing-function 特效] [delay 延遲] ;</span><br></pre></td></tr></table></figure><table><thead><tr><th>屬性</th><th>說明</th></tr></thead><tbody><tr><td>transition-property</td><td>名稱 (放要變的class名稱)</td></tr><tr><td>transition-duration</td><td>執行時間</td></tr><tr><td>transition-timing-function</td><td>執行的速度曲線</td></tr><tr><td>transition-delay</td><td>延遲，多久後執行 transition</td></tr></tbody></table><h4 id="transition-timing-function-漸變函式"><a href="#transition-timing-function-漸變函式" class="headerlink" title="transition-timing-function 漸變函式"></a>transition-timing-function 漸變函式</h4><p>動畫變換的速度</p><table><thead><tr><th>漸變函式</th><th>貝茲曲線</th><th>效果</th></tr></thead><tbody><tr><td>ease</td><td>cubic-bezier (0.25, 0.1, 0.25, 1.0)</td><td>慢(剛起跑緩衝) &gt; 快 &gt; 慢(剎車感)</td></tr><tr><td>linear</td><td>cubic-bezier (0.0, 0.0, 1.0, 1.0)</td><td>速度不變.平平的</td></tr><tr><td>ease-in</td><td>cubic-bezier (0.42, 0, 1.0, 1.0)</td><td>慢(吃力的起床) &gt; 快(快遲到了)</td></tr><tr><td>ease-out</td><td>cubic-bezier (0, 0, 0.58, 1.0)</td><td>快 &gt; 慢(剎車感)</td></tr><tr><td>ease-in-out</td><td>cubic-bezier (0.42, 0, 0.58, 1.0)</td><td>慢(吃力的起床) &gt; 快 &gt; 慢(剎車感)</td></tr></tbody></table><p>想要其他的線性可以使用下面的網站自己調看看<br>4個數字組成，0~1之間<br><a href="https://cubic-bezier.com/" target="_blank" rel="noopener">貝茲曲線</a></p><h4 id="套用效果-1"><a href="#套用效果-1" class="headerlink" title="套用效果"></a>套用效果</h4><style>  .transition123{    width:50px;    height:50px;    background-color:red;    margin-bottom:10px;  }  .transition123:hover{    background-color:blue;    margin-left:30px;    transition: background-color 3s;    transition: margin-left 3s;  }</style><p>(滑鼠請移到方塊上)</p><div class="transition123"></div><pre><code>div{  width:50px;  height:50px;  background-color:red;  margin-bottom:10px;}div:hover{  background-color:blue;  margin-left:30px;  transition: background-color 3s;  transition: margin-left 3s;}//寫很多屬性時可以下面這樣div:hover{  background-color:blue;  margin-left:30px;  transition-property: background-color, margin-left;  transition-duration: 3s, 1s;}</code></pre><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" target="_blank" rel="noopener">更多 Transition 的搭配使用</a></p><hr><h3 id="比較-Animation、Transition-差異"><a href="#比較-Animation、Transition-差異" class="headerlink" title="比較 Animation、Transition 差異"></a>比較 Animation、Transition 差異</h3><table><thead><tr><th>屬性</th><th>特色差異</th></tr></thead><tbody><tr><td>Animation</td><td>1. 網頁載入直接執行特效。<br>2. 可設定較細的動畫效果(關鍵影格.設定很多時間點)</td></tr><tr><td>Transition</td><td>1. 需要事件觸發才能執行特效。(滑鼠、鍵盤事件) <br>2. 只能設定一開始跟結束的效果中間無法。<br>3. 一次性無法重複 (除非一直觸發才能重複)</td></tr></tbody></table><p>他們簡寫的前4個順序一樣，但只要寫前面2個就可以跑了。</p><ul><li><p>animation:<br>name duration timing-function delay<br>iteration-count direction fill-mode play-state;</p></li><li><p>transition:<br>property duration timing-function delay;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 網頁特效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Source maps 筆記</title>
      <link href="/blogger/2020/07/02/source-maps/"/>
      <url>/blogger/2020/07/02/source-maps/</url>
      
        <content type="html"><![CDATA[<p>直播的筆記與其他的整理<br><a href="https://www.facebook.com/will.fans/videos/1834092806619855" target="_blank" rel="noopener">前端工程師不可不知的 Source Maps 應用技巧</a></p><h3 id="什麼是-Source-maps"><a href="#什麼是-Source-maps" class="headerlink" title="什麼是 Source maps"></a>什麼是 Source maps</h3><p>(原始碼地圖、來源對應)<br>產生 *.map 的檔案<a id="more"></a><br>會紀錄原始碼關鍵字和座標(第幾行的位置)。<br>css、js都支援 Source maps<br>主要給瀏覽器用 </p><p>(用途)<br>網站上使用的 min 壓縮檔<br>透過 map 找到原始檔案的位置來修改維護。</p><h3 id="瀏覽器對壓縮最佳化的-js-解壓縮"><a href="#瀏覽器對壓縮最佳化的-js-解壓縮" class="headerlink" title="瀏覽器對壓縮最佳化的 js 解壓縮"></a>瀏覽器對壓縮最佳化的 js 解壓縮</h3><ol><li><p>自動格式化原始碼(google 擴充套建 PrettyPrint)<br>網頁左上角應用程式-&gt;現在應用程式商片-&gt;進去搜尋</p><img src="https://lh3.googleusercontent.com/xGYFnx7QNmqWf63dEKrBHPTdhKK49dLYKmo376aiN4-fM0lR_0lxiXtJrFZOVjFzhuWN8HuasA=w440-h280-e365" width="200px"></li><li><p>f12 的 Sources 點要使用的 min.js<br>再點『{}』就可以解析 (在程式碼那塊的左下角)</p></li></ol><p>如果壓縮檔的名稱有壓過會變成很簡易的代號.不容易看懂.這時就需要使用 Source maps 來產生 *.map 檔跟原始檔連結</p><h3 id="Source-maps-方式-偵錯時使用"><a href="#Source-maps-方式-偵錯時使用" class="headerlink" title="Source maps 方式 (偵錯時使用)"></a>Source maps 方式 (偵錯時使用)</h3><p>先下載要使用的工具(直播中使用 uglify-js)<br>再用下面的方式<br>成功在網頁上.會先讀入壓縮檔自動轉換成原始檔顯示</p><h4 id="方法一-壓縮檔與-map-連結"><a href="#方法一-壓縮檔與-map-連結" class="headerlink" title="(方法一) 壓縮檔與 map 連結"></a>(方法一) 壓縮檔與 map 連結</h4><p>在壓縮檔 *.min.js 的最後一行打<br>(同樣位置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;# sourceMappingURL&#x3D;*.min.js.map</span><br></pre></td></tr></table></figure><p>(不同位置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;# sourceMappingURL&#x3D;&#x2F;path&#x2F;to&#x2F;*.min.js.map</span><br></pre></td></tr></table></figure><p>缺點是要手動在 min.js 最後加入這個</p><h4 id="方法二-在-http-header-加入程式碼"><a href="#方法二-在-http-header-加入程式碼" class="headerlink" title="(方法二) 在 http header 加入程式碼"></a>(方法二) 在 http header 加入程式碼</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-SourceMap: &#x2F;path&#x2F;to&#x2F;*.js.map</span><br></pre></td></tr></table></figure><h3 id="更改完原始的-js-後"><a href="#更改完原始的-js-後" class="headerlink" title="更改完原始的 js 後"></a>更改完原始的 js 後</h3><p>要再重新產生新的壓縮 js 和 Source maps 才會生效</p><h3 id="檔案壓縮是為了網頁的效能"><a href="#檔案壓縮是為了網頁的效能" class="headerlink" title="檔案壓縮是為了網頁的效能"></a>檔案壓縮是為了網頁的效能</h3><p>JS 最佳化:</p><ol><li>合併<ul><li>多個js檔合併一個(越多js檔網頁跑越慢)</li><li>減少 HTTP 要求次數來提升瀏覽效率</li></ul></li><li>壓縮<ul><li>js中多餘的空白字刪除</li><li>過長的區域變數變短<br>(改掉原本的名稱.所以需要用Source maps.只用PrettyPrint 可能還會看不懂。ex: event變n)</li><li>縮小檔案加快檔案的下載速度</li></ul></li><li>常用工具: uglify-js、webpack module bundler、TypeScript、Babel<br>cli裡面也有</li></ol><p>目標:</p><ul><li>縮小檔案大小，降低網路流量</li><li>讓變數及函式名稱變成無意義文字，讓別人不容易反推程式邏輯<br>(js是送到用戶端，網站上線時需要加工處理。)</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>debugger</code> js會停下來.接下來一步步的執行<br>開發時不要用壓縮.上線在用.但通常上線才發現bug!<br>才會需要用 Source maps</p>]]></content>
      
      
      
        <tags>
            
            <tag> source maps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 建立部落格(4) - NexT 美化</title>
      <link href="/blogger/2020/07/01/hexo-change-theme-2/"/>
      <url>/blogger/2020/07/01/hexo-change-theme-2/</url>
      
        <content type="html"><![CDATA[<h3 id="文章日期自己設定"><a href="#文章日期自己設定" class="headerlink" title="文章日期自己設定"></a>文章日期自己設定</h3><p>原本日期是顯示檔案生成的時間，可以改成自己寫好的日期。</p><ol><li>文章的檔名前面加上日期<br>ex: 2020-01-01-oneBlog.md<a id="more"></a></li><li>在 _config.yml 檔案的 #Writing 下面的 # new_post_name: :title.md 改成<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure></li></ol><h3 id="自定義-css"><a href="#自定義-css" class="headerlink" title="自定義 css"></a>自定義 css</h3><ol><li>在 themes/next/source/css 中建立 _mycss.styl 檔案放自己想要新增的。</li><li>引入檔案，在 main.styl 中的最後加上下面程式碼。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;_mycss.styl&quot;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="大頭照設定"><a href="#大頭照設定" class="headerlink" title="大頭照設定"></a>大頭照設定</h3><p>找到這個檔案 themes/next/source/images/avatar.gif<br>把自己的大頭蓋過去.可以改副檔名</p><p>到主題下的 _config.yml 改路徑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  url: &#x2F;images&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure><h3 id="推薦插件"><a href="#推薦插件" class="headerlink" title="推薦插件"></a>推薦插件</h3><h4 id="搜尋-search"><a href="#搜尋-search" class="headerlink" title="搜尋 search"></a>搜尋 search</h4><ol><li><p>直接在終端機打下面的指令安裝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>在主題下的 _config.yml 中.下面 enable: false 改 true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure></li></ol><h4 id="留言板-disqus"><a href="#留言板-disqus" class="headerlink" title="留言板 disqus"></a>留言板 disqus</h4><p>照下面這安裝就可以呈現.只是不能在首頁看有沒有效果<br><a href="https://www.jianshu.com/p/d68de067ea74" target="_blank" rel="noopener">Hexo添加Disqus评论</a></p><h4 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h4><p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a></p><h3 id="推薦的網站"><a href="#推薦的網站" class="headerlink" title="推薦的網站"></a>推薦的網站</h3><p><a href="https://guanqr.com/tech/website/hexo-theme-next-customization/" target="_blank" rel="noopener">Hexo-NexT 主题个性优化</a></p><h3 id="修改的主題上傳到-github"><a href="#修改的主題上傳到-github" class="headerlink" title="修改的主題上傳到 github"></a>修改的主題上傳到 github</h3><p>這邊卡了一下，沒看過 github 上 themes 裡面資料夾會指到另一個地方<br>過程中感覺快把 git 弄壞了.後來有個感想是不要照網路上的亂弄<br>要懂自己在打什麼 XD ~ 之前都是先試在來理解</p><p><a href="https://www.zhihu.com/question/63962146" target="_blank" rel="noopener">Hexo Next 主题上传到Github中去以后无法点击查看文件？pull下来也是空白的？</a><br><a href="https://gitbook.tw/chapters/using-git/rename-and-delete-file.html" target="_blank" rel="noopener">【狀況題】如何在 Git 裡刪除檔案或變更檔名？</a></p><p>看很多文章後發現都有 git rm –cached 相關的指令</p><p>我的作法是</p><ol><li>把 next 裡面的 git 資料夾刪除</li><li>下指令把遠端的指向拿掉<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached themes&#x2F;next</span><br></pre></td></tr></table></figure></li><li>重新提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m&quot;delete&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>(完成)</li></ol><p>如果過程中很卡一直在循環<br>可以還原一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git git reset --hard HEAD</span><br><span class="line">git status &#x2F;&#x2F; 查看一下目前狀況</span><br></pre></td></tr></table></figure><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>整個弄下來花好幾天了，開始打算寫部落格或想換平台 Hexo 從來都不是首選，<br>因緣際會下對 git、markdown 更了解後，再加上想彈性一點的平台就想說來挑戰試試看，<br>沒想到還弄得起來!!<br>過程中發現自己看文件的掌握比以前好很多，問題搜尋關鍵字嚇得更準確不會查半天查不到，<br>此外在改樣式的過程中觀察到模板是怎麼設計程式和結構，讓我覺得很佩服!<br>蠻開心在過程中學到很多，也發現問題一定要解決不然做不同的專案都會卡一樣的東西。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 建立部落格(3) - 更換主題</title>
      <link href="/blogger/2020/06/27/hexo-change-theme/"/>
      <url>/blogger/2020/06/27/hexo-change-theme/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes</a> 裡面有很多的版型可以選擇，<br>一開始的預設主題是 landscape，<br>查詢過程中發現目前最熱門、支援最多的是 <a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a> 就來用用看!</p><a id="more"></a><h3 id="安裝主題"><a href="#安裝主題" class="headerlink" title="安裝主題"></a>安裝主題</h3><p>根據 <a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a> 官方文件來安裝。</p><ol><li><p>下載 NexT Theme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>下載完.查看themes裡面的資料夾是不是多個next的資料夾。</p></li><li><p>在 _config.yml 檔案裡把 theme: landscape 改換主題</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li><li><p>本地端預覽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>注意可能有暫存.如果沒更換可以用無痕開啟網頁。</p></li></ol><h3 id="版型調整"><a href="#版型調整" class="headerlink" title="版型調整"></a>版型調整</h3><p>在 themes/next/layout 資料夾中的檔案.不同版型的檔案類型也不同.花一些時間了解他的邏輯 + 樣板語言就可以改 (其他詳細記錄在下一篇)</p><h3 id="上傳到遠端"><a href="#上傳到遠端" class="headerlink" title="上傳到遠端"></a>上傳到遠端</h3><p>自動生成靜態網暫並上傳遠端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>注意上傳的網址路徑.錯誤會跑版.如果跑掉只要在網頁的 _config.yml 設定 root 。</p><p>我是用 github<br>如果靜態網頁是上傳到 master，只要設定成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root: &#x2F;</span><br></pre></td></tr></table></figure><p>如果 master 是放資料，靜態網頁是在 gh-pages 上的話</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root: &#x2F;專案名稱&#x2F;</span><br></pre></td></tr></table></figure><p>記得這邊有時候還是要更新 master 的程式資料</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 建立部落格(2) - 創立部落格</title>
      <link href="/blogger/2020/06/26/hexo-created/"/>
      <url>/blogger/2020/06/26/hexo-created/</url>
      
        <content type="html"><![CDATA[<h3 id="為何選-Hexo-建部落格"><a href="#為何選-Hexo-建部落格" class="headerlink" title="為何選 Hexo 建部落格?"></a>為何選 Hexo 建部落格?</h3><p>一開始是使用 google blogger 想要專注寫文章筆記，後來會 markdown 發現這很快能呈現有編排的樣子，<br>加上想把原本的文章重新整理，因此挑選時想找調整彈性比較大的部落格就挑到這個。</p><a id="more"></a><p>優點:使用 markdown 用一些元素就可以把版面呈現很好、中文文件多(主要開發者是華人)<br>缺點:圖片連結需要另外用(可以搭配 Firebase)</p><hr><h3 id="安裝並建立專案"><a href="#安裝並建立專案" class="headerlink" title="安裝並建立專案"></a>安裝並建立專案</h3><ul><li>安裝 git <!--kk 補連結--></li><li>安裝 node.js <!--kk 補連結--></li><li>安裝 hexo (步驟在下面) </li></ul><h5 id="1-安裝hexo"><a href="#1-安裝hexo" class="headerlink" title="1. 安裝hexo"></a>1. 安裝hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h5 id="2-建立專案資料夾"><a href="#2-建立專案資料夾" class="headerlink" title="2. 建立專案資料夾"></a>2. 建立專案資料夾</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>也可以建個資料夾後.在裡面打</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>資料夾中會產生下面這些文件</p><!--kk 放圖0.安裝hexo後ㄦ--><pre><code>node_modulesscaffolds 範例(可忽略)source 放文章(放在_post資料夾裡面)themes 安裝主題時用.gitignore 上傳 git 時忽略上傳的檔案package.json 套件管理</code></pre><h5 id="3-本地端瀏覽"><a href="#3-本地端瀏覽" class="headerlink" title="3. 本地端瀏覽"></a>3. 本地端瀏覽</h5><p>在終端機下指令-本地端預覽(s是serve的縮寫)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>會出現 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>打開後會出現下面這預設的部落格</p><!--(放圖1.預設的部落格)--><hr><h3 id="部落格部屬到遠端-github-上"><a href="#部落格部屬到遠端-github-上" class="headerlink" title="部落格部屬到遠端 github 上"></a>部落格部屬到遠端 github 上</h3><h5 id="1-上傳整個專案"><a href="#1-上傳整個專案" class="headerlink" title="1. 上傳整個專案"></a>1. 上傳整個專案</h5><p>a. 建立 git 專案 <!--kk 補連結--><br>b. 在 .gitignore 資料夾中寫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules&#x2F;</span><br><span class="line">themes&#x2F;</span><br></pre></td></tr></table></figure><p>忽略上面2個資料夾.因為 node_modules 檔案太大，themes等等要改主題所以先不要上傳<br>在專案的終端機打下面 git 指令<br>不清楚可以查看 git 相關資料 <!--kk 補連結--></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m&quot;create project&quot;</span><br><span class="line">git remote add origin &lt;url&gt;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h5 id="2-上傳-hexo-的部落格"><a href="#2-上傳-hexo-的部落格" class="headerlink" title="2. 上傳 hexo 的部落格"></a>2. 上傳 hexo 的部落格</h5><p>a. 設定路徑<br>修改 _config.yml (網站配置文件)裡面的 deploy<br>把檔案推到 gh-pages 這分支上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  branch: gh-pages</span><br><span class="line">  repo: &lt;儲存庫的路徑&gt;</span><br></pre></td></tr></table></figure><p>b. 打指令上傳遠端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 上傳遠端.部署上去 (生成靜態網頁，並上傳遠端)</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果上面指令無法的話.第一次上傳需要下面這個</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 生成靜態網頁.檔案會出現 public 資料夾</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第一次需要這樣.之後可以省略這步驟</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>c. 上傳後如果網頁整個跑版(需要檢查路徑)</p><ol><li><p>在 _config.yml 中<br>改相對路徑 true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">relative_link:true</span><br></pre></td></tr></table></figure></li><li><p>如果是上傳到 github 上，因為網站是存在子目錄中，要設定 _config.yml 的 root (網站根目錄)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https:&#x2F;&#x2F;teishashu.github.io&#x2F;</span><br><span class="line">root: &#x2F;blogger&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>重新上傳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p> 需要等一下再刷新網頁</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 建立部落格(1) - 常用指令</title>
      <link href="/blogger/2020/06/25/hexo-code/"/>
      <url>/blogger/2020/06/25/hexo-code/</url>
      
        <content type="html"><![CDATA[<h3 id="生成靜態網頁"><a href="#生成靜態網頁" class="headerlink" title="生成靜態網頁"></a>生成靜態網頁</h3><p>(全寫hexo generater)<br>會產生public檔案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="本地端預覽"><a href="#本地端預覽" class="headerlink" title="本地端預覽"></a>本地端預覽</h3><p>(全寫hexo serve)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="上傳遠端"><a href="#上傳遠端" class="headerlink" title="上傳遠端"></a>上傳遠端</h3><p>deploy 文件生成後立即部屬上去遠端網站<br>(可以省略 hexo g)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="watch-監視文件變動-w"><a href="#watch-監視文件變動-w" class="headerlink" title="watch 監視文件變動 (-w)"></a>watch 監視文件變動 (-w)</h3><p>網站存檔時自動升成新的靜態網頁<br>(適合測試網站時使用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 例子</span><br><span class="line">hexo g -w</span><br></pre></td></tr></table></figure><h3 id="clean-清除"><a href="#clean-清除" class="headerlink" title="clean 清除"></a>clean 清除</h3><p>清除暫存(db.json)和已生成的靜態文件(public)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>更換主題時生成有問題可以使用</p><h3 id="錯誤訊息紀錄"><a href="#錯誤訊息紀錄" class="headerlink" title="錯誤訊息紀錄"></a>錯誤訊息紀錄</h3><p>會生成一個 debug.log 檔案裡面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --debug</span><br></pre></td></tr></table></figure><h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><h4 id="草稿文章"><a href="#草稿文章" class="headerlink" title="草稿文章"></a>草稿文章</h4><p>雖然一開始比較想要用手動，但是指令比較快還是需要熟悉，而且會自動把每頁需要的…建立好。</p><p>(手動)<br>在 source 的資料夾建立 _drafts 資料夾，新增一份.md。</p><p>(指令)<br>新增草稿文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &lt;文章標題&gt;</span><br></pre></td></tr></table></figure><p>發布草稿文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft &lt;文章標題&gt;</span><br></pre></td></tr></table></figure><h4 id="其他頁面"><a href="#其他頁面" class="headerlink" title="其他頁面"></a>其他頁面</h4><p>除了首頁，像關於我們等其他頁面。</p><p>(手動)<br>在 source 資料夾下面新增想要的資料夾名稱，裡面放index.md</p><p>(指令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;頁面名稱&gt;</span><br></pre></td></tr></table></figure><p>也會產生手動的效果.在改檔案裡面的內容就可以</p><p>(範例):tags 標籤、categories 分類的頁面<br>a. 新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>b. 增加頁面 type 屬性<br>在 source/tags 資料夾中的 index.md<br>頁面增加 type 屬性，就可以自動有相關的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>categories 分類頁面也是一樣的作法，<code>type: &quot;categories&quot;</code> 就可以</p><h4 id="文章折疊預覽"><a href="#文章折疊預覽" class="headerlink" title="文章折疊預覽"></a>文章折疊預覽</h4><p><a href="http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html" target="_blank" rel="noopener">參考文章: 让hexo的首页只显示文章的部分内容而不是全部 | 朱启的个人博客</a><br>我是用裡面的第二項.在頁面中增加<code>&lt;!--more--&gt;</code><br>沒想到只是這樣註記就有這效果!!</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
