{"meta":{"title":"亭夏 Teisha - 邁向前端","subtitle":"","description":"","author":"Teisha HSU","url":"https://teishashu.github.io","root":"/blogger/"},"pages":[{"title":"關於","date":"2020-06-28T15:45:04.000Z","updated":"2020-07-01T07:40:34.287Z","comments":true,"path":"about/index.html","permalink":"https://teishashu.github.io/about/index.html","excerpt":"","text":"高中、大學關於廣告、商業設計的7年美學培養，畢業後從事網頁設計從此開始接觸 HTML、CSS、jQuery、Bootstrap 過程中發現如果要把網頁做得更好，除了多看網站來設計外，也需要學會寫 JavaScript 這樣才可以做得更彈性變化更多，不知不覺就往前端的方向走過去了! 開始寫文章是因為一直以來讀書都很喜歡寫筆記，但是紙本很容易一陣子就不見了或者不容易查詢，後來慢慢電子化後發現寫部落格蠻不錯的，可以快速查詢又可以練習表達思緒。"},{"title":"","date":"2020-06-28T15:45:04.000Z","updated":"2020-06-29T02:47:05.434Z","comments":true,"path":"categories/index.html","permalink":"https://teishashu.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-29T02:14:02.000Z","updated":"2020-06-29T02:46:52.135Z","comments":true,"path":"tags/index.html","permalink":"https://teishashu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"網頁動畫、特效(2)- Gsap3 + Vue.js","slug":"animate-gasp","date":"2020-07-16T16:00:00.000Z","updated":"2020-07-28T04:31:00.974Z","comments":true,"path":"2020/07/17/animate-gasp/","link":"","permalink":"https://teishashu.github.io/2020/07/17/animate-gasp/","excerpt":"介紹https://hackmd.io/@chupai/SJStDfFV8#GSAP3 安裝官方各種安裝方式","text":"介紹https://hackmd.io/@chupai/SJStDfFV8#GSAP3 安裝官方各種安裝方式 npm 安裝 1npm install gsap 引入專案中上面官方網站 npm 安裝的部分有些插件可以挑選.這次需要 ScrollTrigger (頁面滑到才動)另外目前設定只有專案的首頁需要用到.所以在那 component 頁面打下面的指令引入 3行。 12345678&lt;script&gt;import &#123; gsap &#125; from &quot;gsap&quot;;import &#123; ScrollTrigger &#125; from &quot;gsap&#x2F;ScrollTrigger&quot;;gsap.registerPlugin(ScrollTrigger);export default &#123;&#125;&lt;&#x2F;script&gt; 使用方式gsap 是使用 id 或 class 操作動畫。 公式12345678910111213gsap.method(&#39;selector&#39;, &#123;&#125;);&#x2F;&#x2F; 使用例子 1gsap.to(&quot;.a&quot;, &#123;color: &#39;#ccc&#39;, duration: 2&#125;);&#x2F;&#x2F; 使用例子 2gasp.from (&quot;.a&quot;, &#123; duration:3, x:&quot;-50vw&quot;, rotation:-300, ease:&quot;linear&quot;, scrollTrigger:&#123; trigger:&quot;.a&quot;, markers:true &#125;&#125;) 測試專案 gsap 是否安裝成功(成功的話 #h1 出現在畫面中會右移) 12345678910111213141516&lt;template&gt; &lt;div&gt; &lt;h1 id&#x3D;&quot;h1&quot;&gt;我是標題&lt;&#x2F;h1&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; gsap &#125; from &quot;gsap&quot;;import &#123; ScrollTrigger &#125; from &quot;gsap&#x2F;ScrollTrigger&quot;;gsap.registerPlugin(ScrollTrigger);export default &#123; mounted() &#123; gsap.to(&quot;#h1&quot;, &#123;x: 100, duration: 1&#125;); &#125;&#125;&lt;&#x2F;script&gt; ScrollTrigger 滾動觸發Introducing ScrollTrigger for GSAP 範例.下面的 scrollTrigger (要小寫s開頭).不然會顯示找不到這插件 1234567891011gsap.to(&quot;#h1&quot;, &#123; &#x2F;&#x2F;要觸發的元素 scrollTrigger:&#123; &#x2F;&#x2F;頁面滑動觸發設定 trigger: &quot;#product1&quot;, &#x2F;&#x2F;要觸發的元素 start: &quot;top center&quot;, &#x2F;&#x2F;第一個值:元素的開始位置，第二個值:畫面的位置 end: &quot;bottom 100px&quot; &#x2F;&#x2F; 同 start 用法 marker: true, &#x2F;&#x2F;顯示提示字.會顯示設定、物件的開始結束 toggleActions: &quot;restart none none none&quot; &#x2F;&#x2F;切換動作 &#125;, x: 400, &#x2F;&#x2F;外部這是要改變的效果 duration:2&#125;); start 可放的值top、center、bottom、pixels、percentages(relative to top) toggleActions 可以放4個值.依序跑| 值 | 說明 ||———-|——|| play | 只跑一次 || pause | 暫停 || resume | 繼續 || reverse | 逆轉 || restart | 重複跑 || reset | 重置 || complete | 完成 || none | 無 |","categories":[{"name":"Gsap","slug":"Gsap","permalink":"https://teishashu.github.io/categories/Gsap/"}],"tags":[{"name":"網頁特效","slug":"網頁特效","permalink":"https://teishashu.github.io/tags/%E7%B6%B2%E9%A0%81%E7%89%B9%E6%95%88/"},{"name":"Vue","slug":"Vue","permalink":"https://teishashu.github.io/tags/Vue/"},{"name":"Gsap","slug":"Gsap","permalink":"https://teishashu.github.io/tags/Gsap/"}]},{"title":"網頁動畫、特效(1)- Animation、Transition","slug":"animate-animation-transition","date":"2020-07-14T16:00:00.000Z","updated":"2020-07-16T11:19:32.780Z","comments":true,"path":"2020/07/15/animate-animation-transition/","link":"","permalink":"https://teishashu.github.io/2020/07/15/animate-animation-transition/","excerpt":"前言製作網頁的動畫、特效以前是用 JavaScript、Flash，後來 css3 增加了一些屬性，變成開發時間可以縮短，透過 css 交給瀏覽器處理也比較不吃資源。","text":"前言製作網頁的動畫、特效以前是用 JavaScript、Flash，後來 css3 增加了一些屬性，變成開發時間可以縮短，透過 css 交給瀏覽器處理也比較不吃資源。 要把效果做好有幾個關鍵字可以研究： 動畫：css Animation 過度、轉場：css Transition 變形：transform 2D、transform 3D基本的有概念後就可以開始找範例解析試模仿寫看看。 這次紀錄研究 Animation、Transition 後，搭配 scrollmagic、gsap，讓網頁使用起來多點效果不那麼死硬的過程，transform 這次比較用不到所以先跳過。 CSS3 Animation動畫也稱為影格動畫，可以設定比較細緻的效果。動畫是直接執行的。 語法簡寫順序1animation: [name 名稱] [duration 時間] | [timing-function 執行效果] | [delay 延遲] | [iteration-count 重複次數] | [direction 方向] | [fill-mode 播放前後模式] | [play-state 播放狀態]; 要搭配關鍵影格 @keyframes 才可以用，畢竟沒有時間設定開始結束做什麼無法跑呀。 屬性 說明 補充 animation-name 名稱。@keyframes 後面的名稱 @keyframes 搭配 from、to。 animation-duration 執行時間(s 秒或 ms 毫秒)，預設0 animation-timing-function 執行效果(速度曲線) w3schools animation-delay 延遲(間隔多久後開始)，預設0 animation-iteration-count 重覆執行次數，預設 1 infinite 無限次 animation-direction 執行方向。預設 normal reverse 反向、alternate 先正後反、alternate-reverse先反後正 animation-fill-mode 播放前後模式，預設 none forwards、backwards、both animation-play-state 播放或暫停狀態，預設 running paused 暫停 @keyframes 關鍵影格設定方式 公式 1234@keyframes 動畫名稱 &#123; 時間1 &#123;css 樣式&#125; 時間2 &#123;css 樣式&#125;&#125; 注意動畫名稱大小寫，不同大小寫是不同字。 123&#x2F;&#x2F; 下面2個是不同的動畫@keyframes Abc&#123;&#125;@keyframes ABC&#123;&#125; 設定時間有2種方式: from、to : 一開始和最後的效果(0%、100%)1234@keyframes animate1 &#123; from &#123;background-color:red; margin-left:0;&#125; to &#123;background-color:black; margin-left:50px;&#125;&#125; 0-100% : 幾 % 時做什麼事12345@keyframes animate2 &#123; 0% &#123;background-color:red; margin-left:0;&#125; 50% &#123;background-color:blue; margin-left:100px;&#125; 100% &#123;background-color:black; margin-left:50px;&#125;&#125; 套用效果 .animate123{ width:50px; height:50px; animation: animate2 3s ease 1s infinite alternate; background-color:red; margin-bottom:10px; } @keyframes animate2 { 0% {background-color:red; margin-left:0;} 50% {background-color:blue; margin-left:100px;} 100% {background-color:black; margin-left:50px;} } 123456789101112div&#123; width:50px; height:50px; animation: animate2 3s ease 1s infinite alternate; background-color:red;&#125;@keyframes animate2 &#123; 0% &#123;background-color:red; margin-left:0;&#125; 50% &#123;background-color:blue; margin-left:100px;&#125; 100% &#123;background-color:black; margin-left:50px;&#125;&#125; 完整解析 CSS 動畫 Animate.cssCSS3 Animate 有太多要設定，有人整理成一個css檔方便使用，只要會引用、使用就可以操作。Animate.css Vue.js中使用方式animate.css在vue项目中的使用 操作流程: 下載安裝 在想要動畫的地方放 css，每個想要的特效前面都要加animate__animated。 1&lt;h1 class&#x3D;&quot;title animate__animated animate__bounce&quot;&gt;title&lt;&#x2F;h1&gt; 如果希望可以調整的更多.有2種方式:a. 在設定的 css 上面寫 animation 就可以控制 12345&lt;style&gt; .title&#123; animation-duration: 2s; &#125;&lt;&#x2F;style&gt; b. 也可以在原本的地方增加其他 css 屬性 1&lt;h1 class&#x3D;&quot;title animate__animated animate__bounce animate__faster&quot;&gt;title&lt;&#x2F;h1&gt; 效果 屬性名稱 成效 延遲 animate__delay-2sanimate__delay-3sanimate__delay-4sanimate__delay-5s 2s3s4s5s 速度 animate__slowanimate__sloweranimate__fastanimate__faster 2s3s800ms500ms 重複 animate__repeat-1animate__repeat-2animate__repeat-3animate__infinite 123infinite(無限重複) CSS3 Transition 語法動畫效果需要觸發、只能跑一次，適合用在頁面轉場。 語法簡寫順序1transition: [property 名稱] [duration 時間] [timing-function 特效] [delay 延遲] ; 屬性 說明 transition-property 名稱 (放要變的class名稱) transition-duration 執行時間 transition-timing-function 執行的速度曲線 transition-delay 延遲，多久後執行 transition transition-timing-function 漸變函式動畫變換的速度 漸變函式 貝茲曲線 效果 ease cubic-bezier (0.25, 0.1, 0.25, 1.0) 慢(剛起跑緩衝) &gt; 快 &gt; 慢(剎車感) linear cubic-bezier (0.0, 0.0, 1.0, 1.0) 速度不變.平平的 ease-in cubic-bezier (0.42, 0, 1.0, 1.0) 慢(吃力的起床) &gt; 快(快遲到了) ease-out cubic-bezier (0, 0, 0.58, 1.0) 快 &gt; 慢(剎車感) ease-in-out cubic-bezier (0.42, 0, 0.58, 1.0) 慢(吃力的起床) &gt; 快 &gt; 慢(剎車感) 想要其他的線性可以使用下面的網站自己調看看4個數字組成，0~1之間貝茲曲線 套用效果 .transition123{ width:50px; height:50px; background-color:red; margin-bottom:10px; } .transition123:hover{ background-color:blue; margin-left:30px; transition: background-color 3s; transition: margin-left 3s; } (滑鼠請移到方塊上) div{ width:50px; height:50px; background-color:red; margin-bottom:10px; } div:hover{ background-color:blue; margin-left:30px; transition: background-color 3s; transition: margin-left 3s; } //寫很多屬性時可以下面這樣 div:hover{ background-color:blue; margin-left:30px; transition-property: background-color, margin-left; transition-duration: 3s, 1s; }更多 Transition 的搭配使用 比較 Animation、Transition 差異 屬性 特色差異 Animation 1. 網頁載入直接執行特效。2. 可設定較細的動畫效果(關鍵影格.設定很多時間點) Transition 1. 需要事件觸發才能執行特效。(滑鼠、鍵盤事件) 2. 只能設定一開始跟結束的效果中間無法。3. 一次性無法重複 (除非一直觸發才能重複) 他們簡寫的前4個順序一樣，但只要寫前面2個就可以跑了。 animation:name duration timing-function delayiteration-count direction fill-mode play-state; transition:property duration timing-function delay;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://teishashu.github.io/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://teishashu.github.io/tags/CSS/"},{"name":"網頁特效","slug":"網頁特效","permalink":"https://teishashu.github.io/tags/%E7%B6%B2%E9%A0%81%E7%89%B9%E6%95%88/"}]},{"title":"AJAX-jQuery","slug":"AJAX-jQuery","date":"2020-07-03T06:00:53.000Z","updated":"2020-07-10T02:08:49.188Z","comments":true,"path":"2020/07/03/AJAX-jQuery/","link":"","permalink":"https://teishashu.github.io/2020/07/03/AJAX-jQuery/","excerpt":"之前使用 jQuery 上的 ajax 一直無法順利抓到值因為預設是非同步 async: true改成 async: false 就可以只是官網說用太多使用者體驗不好不太建異(頁面會假死)","text":"之前使用 jQuery 上的 ajax 一直無法順利抓到值因為預設是非同步 async: true改成 async: false 就可以只是官網說用太多使用者體驗不好不太建異(頁面會假死) 總之就是使用 promise 並用 .then 接後續動作 (類似下面程式碼)後來大家又覺得寫太多就使用 promise 的 await 來簡化 promise 的流程。 但前端一直在快速發展後來出現 fetch 、 axios 都是為了更簡便達到一樣的效果。 123456789101112131415161718192021222324252627282930313233343536373839404142434445function ajaxDeleteProduct() &#123; &#x2F;&#x2F; 這邊是要填的資訊.需要依照情況更改 const ajaxUrl &#x3D; &#39;&#123;&#123;route(&#39;name&#39;)&#125;&#125;&#39;; const data &#x3D; &#123; id: 999, &quot;_token&quot;: &quot;&#123;&#123;csrf_token()&#125;&#125;&quot;, &quot;_method&quot;: &quot;post&quot;, &#125;; const method &#x3D; &#39;DELETE&#39;; const ajaxMasterDefer &#x3D; ajaxMaster(ajaxUrl, data, method); $.when(ajaxMasterDefer).then( &#x2F;&#x2F; resolve 成功 function (response) &#123; &#125;, &#x2F;&#x2F; reject 失敗 function (response) &#123; console.log(&#39;ajaxDeleteProduct() response error&#39;) &#125;, &#x2F;&#x2F; pending loading 可以用 loading 效果 function (response) &#123; &#125; );&#125;&#x2F;&#x2F; jQuery ajaxfunction ajaxMaster(ajaxUrl, data, method) &#123; const ajaxDefer &#x3D; $.Deferred(); &#x2F;&#x2F;取得認證 $.ajax(&#123; url: ajaxUrl, method: method, data: data, success: function (response) &#123; ajaxDefer.resolve(response); &#125;, error: function (response) &#123; ajaxDefer.reject(response); &#125; &#125;); return ajaxDefer.promise();&#125;","categories":[{"name":"AJAX","slug":"AJAX","permalink":"https://teishashu.github.io/categories/AJAX/"}],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"https://teishashu.github.io/tags/AJAX/"},{"name":"jQuery","slug":"jQuery","permalink":"https://teishashu.github.io/tags/jQuery/"}]},{"title":"Sync(同步)、Async(非同步)、Await(等待)、Promise(承諾)","slug":"AJAX-同步異步","date":"2020-07-02T16:00:00.000Z","updated":"2020-07-10T13:03:56.381Z","comments":true,"path":"2020/07/03/AJAX-同步異步/","link":"","permalink":"https://teishashu.github.io/2020/07/03/AJAX-%E5%90%8C%E6%AD%A5%E7%95%B0%E6%AD%A5/","excerpt":"tr td:nth-child(1){ white-space:nowrap; } 因為預設是非同步(異步) async: trueJavaScript 是單執行緒的程式語言，程式碼由上讀到下，一次只會執行一段程式碼(同步)。 AJAX 使用發展最原始的js (XMLHttpRequest) jQuery (promise -&gt; await) Fetch Axios","text":"tr td:nth-child(1){ white-space:nowrap; } 因為預設是非同步(異步) async: trueJavaScript 是單執行緒的程式語言，程式碼由上讀到下，一次只會執行一段程式碼(同步)。 AJAX 使用發展最原始的js (XMLHttpRequest) jQuery (promise -&gt; await) Fetch Axios 相關比較 名稱 目的&amp;說明 備註 Sync (同步) 一次只做一件事情，一個完成換下一個。注重順序 需要等才能進行下一個，有時畫面像靜止沒反應-反應不夠快 Async (非同步) 各個任務同時直執行不會互等 Promise (承諾) 解決同步、異步問題，一步一步執行。 使用 new Promise 後，resolve 回傳狀態後接 .then抓到還傳的值進行下個流程 Await (等待) 簡化同步操作 promise ，以及對多個 Promise 物件執行某些操作。等待這段函式完成後才能繼續執行後面程式。 出錯會停止後面的程式碼，為了避免常跟 Async 一起用 Promise (承諾) 先 new promise 3種狀態: pending 載入中、resolved 操作成功、rejexted 操作失敗 (操作成功、失敗都會經過pending) 用 then、catch (接失敗的值) 接回傳的值，在進行下個步驟。JavaScript Promise 全介紹 Await (等待) 為了優化原本的 promise 使程式碼少一點 (不用使用 .then ) 常跟 async 搭配 需要回傳 Promise 的值所以前面要先定義(const abc)await 後面在接要解析的物件或任何值。abc 123456- await 後面放 function覺得這部分不太容易.讀下面2篇會讓觀念更了解[JavaScript Async 和 Await](https:&#x2F;&#x2F;www.oxxostudio.tw&#x2F;articles&#x2F;201908&#x2F;js-async-await.html)[callback、Promise 和 async&#x2F;await 那些事兒](https:&#x2F;&#x2F;noob.tw&#x2F;js-async&#x2F;)[JavaScript Async 與 Await](https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;articles&#x2F;10227935)跟 fetch 一起用是為了接到他的回傳值 async function a(){ await b(); …. // 等 b() 完成後才會執行}a().then(()=&gt;{ ….});","categories":[{"name":"AJAX","slug":"AJAX","permalink":"https://teishashu.github.io/categories/AJAX/"}],"tags":[{"name":"AJAX","slug":"AJAX","permalink":"https://teishashu.github.io/tags/AJAX/"}]},{"title":"Source maps 筆記","slug":"source-maps","date":"2020-07-01T16:00:00.000Z","updated":"2020-07-07T09:36:54.047Z","comments":true,"path":"2020/07/02/source-maps/","link":"","permalink":"https://teishashu.github.io/2020/07/02/source-maps/","excerpt":"直播的筆記與其他的整理前端工程師不可不知的 Source Maps 應用技巧 什麼是 Source maps(原始碼地圖、來源對應)產生 *.map 的檔案","text":"直播的筆記與其他的整理前端工程師不可不知的 Source Maps 應用技巧 什麼是 Source maps(原始碼地圖、來源對應)產生 *.map 的檔案會紀錄原始碼關鍵字和座標(第幾行的位置)。css、js都支援 Source maps主要給瀏覽器用 (用途)網站上使用的 min 壓縮檔透過 map 找到原始檔案的位置來修改維護。 瀏覽器對壓縮最佳化的 js 解壓縮 自動格式化原始碼(google 擴充套建 PrettyPrint)網頁左上角應用程式-&gt;現在應用程式商片-&gt;進去搜尋 f12 的 Sources 點要使用的 min.js再點『{}』就可以解析 (在程式碼那塊的左下角) 如果壓縮檔的名稱有壓過會變成很簡易的代號.不容易看懂.這時就需要使用 Source maps 來產生 *.map 檔跟原始檔連結 Source maps 方式 (偵錯時使用)先下載要使用的工具(直播中使用 uglify-js)再用下面的方式成功在網頁上.會先讀入壓縮檔自動轉換成原始檔顯示 (方法一) 壓縮檔與 map 連結在壓縮檔 *.min.js 的最後一行打(同樣位置) 1&#x2F;&#x2F;# sourceMappingURL&#x3D;*.min.js.map (不同位置) 1&#x2F;&#x2F;# sourceMappingURL&#x3D;&#x2F;path&#x2F;to&#x2F;*.min.js.map 缺點是要手動在 min.js 最後加入這個 (方法二) 在 http header 加入程式碼1X-SourceMap: &#x2F;path&#x2F;to&#x2F;*.js.map 更改完原始的 js 後要再重新產生新的壓縮 js 和 Source maps 才會生效 檔案壓縮是為了網頁的效能JS 最佳化: 合併 多個js檔合併一個(越多js檔網頁跑越慢) 減少 HTTP 要求次數來提升瀏覽效率 壓縮 js中多餘的空白字刪除 過長的區域變數變短(改掉原本的名稱.所以需要用Source maps.只用PrettyPrint 可能還會看不懂。ex: event變n) 縮小檔案加快檔案的下載速度 常用工具: uglify-js、webpack module bundler、TypeScript、Babelcli裡面也有 目標: 縮小檔案大小，降低網路流量 讓變數及函式名稱變成無意義文字，讓別人不容易反推程式邏輯(js是送到用戶端，網站上線時需要加工處理。) 其他debugger js會停下來.接下來一步步的執行開發時不要用壓縮.上線在用.但通常上線才發現bug!才會需要用 Source maps","categories":[],"tags":[{"name":"source maps","slug":"source-maps","permalink":"https://teishashu.github.io/tags/source-maps/"}]},{"title":"Hexo 建立部落格(4) - NexT 美化","slug":"hexo-change-theme-2","date":"2020-07-01T08:21:43.000Z","updated":"2020-07-16T04:27:20.835Z","comments":true,"path":"2020/07/01/hexo-change-theme-2/","link":"","permalink":"https://teishashu.github.io/2020/07/01/hexo-change-theme-2/","excerpt":"文章日期自己設定原本日期是顯示檔案生成的時間，可以改成自己寫好的日期。 文章的檔名前面加上日期ex: 2020-01-01-oneBlog.md","text":"文章日期自己設定原本日期是顯示檔案生成的時間，可以改成自己寫好的日期。 文章的檔名前面加上日期ex: 2020-01-01-oneBlog.md 在 _config.yml 檔案的 #Writing 下面的 # new_post_name: :title.md 改成1new_post_name: :year-:month-:day-:title.md 自定義 css 在 themes/next/source/css 中建立 _mycss.styl 檔案放自己想要新增的。 引入檔案，在 main.styl 中的最後加上下面程式碼。1@import &quot;_mycss.styl&quot;; 大頭照設定找到這個檔案 themes/next/source/images/avatar.gif把自己的大頭蓋過去.可以改副檔名 到主題下的 _config.yml 改路徑 12avatar: url: &#x2F;images&#x2F;avatar.jpg 推薦插件搜尋 search 直接在終端機打下面的指令安裝 1npm install hexo-generator-search --save 在主題下的 _config.yml 中.下面 enable: false 改 true 12local_search: enable: true 留言板 disqus照下面這安裝就可以呈現.只是不能在首頁看有沒有效果Hexo添加Disqus评论 sitemaphexo-generator-sitemap 推薦的網站Hexo-NexT 主题个性优化 修改的主題上傳到 github這邊卡了一下，沒看過 github 上 themes 裡面資料夾會指到另一個地方過程中感覺快把 git 弄壞了.後來有個感想是不要照網路上的亂弄要懂自己在打什麼 XD ~ 之前都是先試在來理解 Hexo Next 主题上传到Github中去以后无法点击查看文件？pull下来也是空白的？【狀況題】如何在 Git 裡刪除檔案或變更檔名？ 看很多文章後發現都有 git rm –cached 相關的指令 我的作法是 把 next 裡面的 git 資料夾刪除 下指令把遠端的指向拿掉1git rm --cached themes&#x2F;next 重新提交123git add .git commit -m&quot;delete&quot;git push (完成) 如果過程中很卡一直在循環可以還原一下 123git add .git git reset --hard HEADgit status &#x2F;&#x2F; 查看一下目前狀況 心得整個弄下來花好幾天了，開始打算寫部落格或想換平台 Hexo 從來都不是首選，因緣際會下對 git、markdown 更了解後，再加上想彈性一點的平台就想說來挑戰試試看，沒想到還弄得起來!!過程中發現自己看文件的掌握比以前好很多，問題搜尋關鍵字嚇得更準確不會查半天查不到，此外在改樣式的過程中觀察到模板是怎麼設計程式和結構，讓我覺得很佩服!蠻開心在過程中學到很多，也發現問題一定要解決不然做不同的專案都會卡一樣的東西。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/tags/Hexo/"}]},{"title":"Hexo 建立部落格(3) - 更換主題","slug":"hexo-change-theme","date":"2020-06-26T16:00:00.000Z","updated":"2020-07-16T04:25:04.978Z","comments":true,"path":"2020/06/27/hexo-change-theme/","link":"","permalink":"https://teishashu.github.io/2020/06/27/hexo-change-theme/","excerpt":"前言Hexo Themes 裡面有很多的版型可以選擇，一開始的預設主題是 landscape，查詢過程中發現目前最熱門、支援最多的是 NexT 就來用用看!","text":"前言Hexo Themes 裡面有很多的版型可以選擇，一開始的預設主題是 landscape，查詢過程中發現目前最熱門、支援最多的是 NexT 就來用用看! 安裝主題根據 NexT 官方文件來安裝。 下載 NexT Theme 1git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next 下載完.查看themes裡面的資料夾是不是多個next的資料夾。 在 _config.yml 檔案裡把 theme: landscape 改換主題 1theme: next 本地端預覽 1hexo s 注意可能有暫存.如果沒更換可以用無痕開啟網頁。 版型調整在 themes/next/layout 資料夾中的檔案.不同版型的檔案類型也不同.花一些時間了解他的邏輯 + 樣板語言就可以改 (其他詳細記錄在下一篇) 上傳到遠端自動生成靜態網暫並上傳遠端 1hexo d 注意上傳的網址路徑.錯誤會跑版.如果跑掉只要在網頁的 _config.yml 設定 root 。 我是用 github如果靜態網頁是上傳到 master，只要設定成 1root: &#x2F; 如果 master 是放資料，靜態網頁是在 gh-pages 上的話 1root: &#x2F;專案名稱&#x2F; 記得這邊有時候還是要更新 master 的程式資料","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/tags/Hexo/"}]},{"title":"Hexo 建立部落格(2) - 創立部落格","slug":"hexo-created","date":"2020-06-25T16:00:00.000Z","updated":"2020-07-16T04:34:48.863Z","comments":true,"path":"2020/06/26/hexo-created/","link":"","permalink":"https://teishashu.github.io/2020/06/26/hexo-created/","excerpt":"為何選 Hexo 建部落格?一開始是使用 google blogger 想要專注寫文章筆記，後來會 markdown 發現這很快能呈現有編排的樣子，加上想把原本的文章重新整理，因此挑選時想找調整彈性比較大的部落格就挑到這個。","text":"為何選 Hexo 建部落格?一開始是使用 google blogger 想要專注寫文章筆記，後來會 markdown 發現這很快能呈現有編排的樣子，加上想把原本的文章重新整理，因此挑選時想找調整彈性比較大的部落格就挑到這個。 優點:使用 markdown 用一些元素就可以把版面呈現很好、中文文件多(主要開發者是華人)缺點:圖片連結需要另外用(可以搭配 Firebase) 安裝並建立專案 安裝 git 安裝 node.js 安裝 hexo (步驟在下面) 1. 安裝hexo1npm install -g hexo-cli 2. 建立專案資料夾123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 也可以建個資料夾後.在裡面打 12hexo initnpm install 資料夾中會產生下面這些文件 node_modules scaffolds 範例(可忽略) source 放文章(放在_post資料夾裡面) themes 安裝主題時用 .gitignore 上傳 git 時忽略上傳的檔案 package.json 套件管理3. 本地端瀏覽在終端機下指令-本地端預覽(s是serve的縮寫) 1hexo s 會出現 http://localhost:4000/打開後會出現下面這預設的部落格 部落格部屬到遠端 github 上1. 上傳整個專案a. 建立 git 專案 b. 在 .gitignore 資料夾中寫 12node_modules&#x2F;themes&#x2F; 忽略上面2個資料夾.因為 node_modules 檔案太大，themes等等要改主題所以先不要上傳在專案的終端機打下面 git 指令不清楚可以查看 git 相關資料 12345git initgit add .git commit -m&quot;create project&quot;git remote add origin &lt;url&gt;git push -u origin master 2. 上傳 hexo 的部落格a. 設定路徑修改 _config.yml (網站配置文件)裡面的 deploy把檔案推到 gh-pages 這分支上 1234deploy: type: git branch: gh-pages repo: &lt;儲存庫的路徑&gt; b. 打指令上傳遠端 12&#x2F;&#x2F; 上傳遠端.部署上去 (生成靜態網頁，並上傳遠端)hexo d 如果上面指令無法的話.第一次上傳需要下面這個 1234567&#x2F;&#x2F; 生成靜態網頁.檔案會出現 public 資料夾hexo g&#x2F;&#x2F; 第一次需要這樣.之後可以省略這步驟npm install hexo-deployer-git --savehexo d c. 上傳後如果網頁整個跑版(需要檢查路徑) 在 _config.yml 中改相對路徑 true 1relative_link:true 如果是上傳到 github 上，因為網站是存在子目錄中，要設定 _config.yml 的 root (網站根目錄) 123# URLurl: https:&#x2F;&#x2F;teishashu.github.io&#x2F;root: &#x2F;blogger&#x2F; 重新上傳 1hexo d 需要等一下再刷新網頁","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/tags/Hexo/"}]},{"title":"Hexo 建立部落格(1) - 常用指令","slug":"hexo-code","date":"2020-06-24T16:00:00.000Z","updated":"2020-07-16T04:24:45.211Z","comments":true,"path":"2020/06/25/hexo-code/","link":"","permalink":"https://teishashu.github.io/2020/06/25/hexo-code/","excerpt":"生成靜態網頁(全寫hexo generater)會產生public檔案 1hexo g","text":"生成靜態網頁(全寫hexo generater)會產生public檔案 1hexo g 本地端預覽(全寫hexo serve) 1hexo s 上傳遠端deploy 文件生成後立即部屬上去遠端網站(可以省略 hexo g) 1hexo d watch 監視文件變動 (-w)網站存檔時自動升成新的靜態網頁(適合測試網站時使用) 12&#x2F;&#x2F; 例子hexo g -w clean 清除清除暫存(db.json)和已生成的靜態文件(public) 1hexo clean 更換主題時生成有問題可以使用 錯誤訊息紀錄會生成一個 debug.log 檔案裡面 1hexo --debug 新增文章草稿文章雖然一開始比較想要用手動，但是指令比較快還是需要熟悉，而且會自動把每頁需要的…建立好。 (手動)在 source 的資料夾建立 _drafts 資料夾，新增一份.md。 (指令)新增草稿文章 1hexo new draft &lt;文章標題&gt; 發布草稿文章 1hexo publish draft &lt;文章標題&gt; 其他頁面除了首頁，像關於我們等其他頁面。 (手動)在 source 資料夾下面新增想要的資料夾名稱，裡面放index.md (指令) 1hexo new page &lt;頁面名稱&gt; 也會產生手動的效果.在改檔案裡面的內容就可以 (範例):tags 標籤、categories 分類的頁面a. 新增 1hexo new page tags b. 增加頁面 type 屬性在 source/tags 資料夾中的 index.md頁面增加 type 屬性，就可以自動有相關的效果。 123---type: &quot;tags&quot;--- categories 分類頁面也是一樣的作法，type: &quot;categories&quot; 就可以 文章折疊預覽參考文章: 让hexo的首页只显示文章的部分内容而不是全部 | 朱启的个人博客我是用裡面的第二項.在頁面中增加&lt;!--more--&gt;沒想到只是這樣註記就有這效果!!","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/tags/Hexo/"}]}],"categories":[{"name":"Gsap","slug":"Gsap","permalink":"https://teishashu.github.io/categories/Gsap/"},{"name":"CSS","slug":"CSS","permalink":"https://teishashu.github.io/categories/CSS/"},{"name":"AJAX","slug":"AJAX","permalink":"https://teishashu.github.io/categories/AJAX/"},{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/categories/Hexo/"}],"tags":[{"name":"網頁特效","slug":"網頁特效","permalink":"https://teishashu.github.io/tags/%E7%B6%B2%E9%A0%81%E7%89%B9%E6%95%88/"},{"name":"Vue","slug":"Vue","permalink":"https://teishashu.github.io/tags/Vue/"},{"name":"Gsap","slug":"Gsap","permalink":"https://teishashu.github.io/tags/Gsap/"},{"name":"CSS","slug":"CSS","permalink":"https://teishashu.github.io/tags/CSS/"},{"name":"AJAX","slug":"AJAX","permalink":"https://teishashu.github.io/tags/AJAX/"},{"name":"jQuery","slug":"jQuery","permalink":"https://teishashu.github.io/tags/jQuery/"},{"name":"source maps","slug":"source-maps","permalink":"https://teishashu.github.io/tags/source-maps/"},{"name":"Hexo","slug":"Hexo","permalink":"https://teishashu.github.io/tags/Hexo/"}]}